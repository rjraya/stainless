[info] Loading settings for project stainless-build-build-build from metals.sbt ...
[info] Loading project definition from /localhome/raya/Desktop/lara/stainless/project/project/project
[info] Loading settings for project stainless-build-build from metals.sbt ...
[info] Loading project definition from /localhome/raya/Desktop/lara/stainless/project/project
[success] Generated .bloop/stainless-build-build.json
[success] Total time: 0 s, completed Dec 3, 2020 3:36:40 PM
[info] Loading settings for project stainless-build from plugins.sbt,metals.sbt ...
[info] Loading project definition from /localhome/raya/Desktop/lara/stainless/project
[success] Generated .bloop/stainless-build.json
[success] Total time: 0 s, completed Dec 3, 2020 3:36:41 PM
[info] Loading settings for project root from build.sbt ...
[info] Loading settings for project inox-build-build-build from metals.sbt ...
[info] Loading project definition from /localhome/raya/Desktop/lara/inox/project/project/project
[info] Loading settings for project inox-build-build from metals.sbt ...
[info] Loading project definition from /localhome/raya/Desktop/lara/inox/project/project
[success] Generated .bloop/inox-build-build.json
[success] Total time: 0 s, completed Dec 3, 2020 3:36:41 PM
[info] Loading settings for project inox-build from plugins.sbt,metals.sbt ...
[info] Loading project definition from /localhome/raya/Desktop/lara/inox/project
[success] Generated .bloop/inox-build.json
[success] Total time: 0 s, completed Dec 3, 2020 3:36:42 PM
[info] Loading settings for project root from build.sbt ...
[info] Resolving key references (10664 settings) ...
[info] Set current project to root (in build file:/localhome/raya/Desktop/lara/stainless/)
[warn] insecure HTTP request is deprecated 'http://dl.bintray.com/tpolecat/maven'; switch to HTTPS or opt-in as ("tpolecat" at "http://dl.bintray.com/tpolecat/maven").withAllowInsecureProtocol(true)
[warn] insecure HTTP request is deprecated 'http://logicrunch.research.it.uu.se/maven'; switch to HTTPS or opt-in as ("uuverifiers" at "http://logicrunch.research.it.uu.se/maven").withAllowInsecureProtocol(true)
[warn] insecure HTTP request is deprecated 'http://dl.bintray.com/tpolecat/maven'; switch to HTTPS or opt-in as ("tpolecat" at "http://dl.bintray.com/tpolecat/maven").withAllowInsecureProtocol(true)
[warn] insecure HTTP request is deprecated 'http://logicrunch.research.it.uu.se/maven'; switch to HTTPS or opt-in as ("uuverifiers" at "http://logicrunch.research.it.uu.se/maven").withAllowInsecureProtocol(true)
[warn] Multiple resolvers having different access mechanism configured with same name 'uuverifiers'. To avoid conflict, Remove duplicate project resolvers (`resolvers`) or rename publishing resolver (`publishTo`).
[warn] insecure HTTP request is deprecated 'http://dl.bintray.com/tpolecat/maven'; switch to HTTPS or opt-in as ("tpolecat" at "http://dl.bintray.com/tpolecat/maven").withAllowInsecureProtocol(true)
[warn] insecure HTTP request is deprecated 'http://logicrunch.research.it.uu.se/maven'; switch to HTTPS or opt-in as ("uuverifiers" at "http://logicrunch.research.it.uu.se/maven").withAllowInsecureProtocol(true)
[warn] Multiple resolvers having different access mechanism configured with same name 'uuverifiers'. To avoid conflict, Remove duplicate project resolvers (`resolvers`) or rename publishing resolver (`publishTo`).
[warn] insecure HTTP request is deprecated 'http://dl.bintray.com/tpolecat/maven'; switch to HTTPS or opt-in as ("tpolecat" at "http://dl.bintray.com/tpolecat/maven").withAllowInsecureProtocol(true)
[warn] insecure HTTP request is deprecated 'http://logicrunch.research.it.uu.se/maven'; switch to HTTPS or opt-in as ("uuverifiers" at "http://logicrunch.research.it.uu.se/maven").withAllowInsecureProtocol(true)
[warn] Multiple resolvers having different access mechanism configured with same name 'uuverifiers'. To avoid conflict, Remove duplicate project resolvers (`resolvers`) or rename publishing resolver (`publishTo`).
[warn] insecure HTTP request is deprecated 'http://dl.bintray.com/tpolecat/maven'; switch to HTTPS or opt-in as ("tpolecat" at "http://dl.bintray.com/tpolecat/maven").withAllowInsecureProtocol(true)
[warn] insecure HTTP request is deprecated 'http://logicrunch.research.it.uu.se/maven'; switch to HTTPS or opt-in as ("uuverifiers" at "http://logicrunch.research.it.uu.se/maven").withAllowInsecureProtocol(true)
[info] Wrote /localhome/raya/Desktop/lara/stainless/frontends/scalac/target/scala-2.12/stainless-scalac_2.12-0.7.4-4-g7ab71b3-SNAPSHOT.pom
[warn] Multiple resolvers having different access mechanism configured with same name 'uuverifiers'. To avoid conflict, Remove duplicate project resolvers (`resolvers`) or rename publishing resolver (`publishTo`).
[warn] insecure HTTP request is deprecated 'http://dl.bintray.com/tpolecat/maven'; switch to HTTPS or opt-in as ("tpolecat" at "http://dl.bintray.com/tpolecat/maven").withAllowInsecureProtocol(true)
[warn] insecure HTTP request is deprecated 'http://logicrunch.research.it.uu.se/maven'; switch to HTTPS or opt-in as ("uuverifiers" at "http://logicrunch.research.it.uu.se/maven").withAllowInsecureProtocol(true)
[info] Wrote /localhome/raya/Desktop/lara/stainless/frontends/stainless-dotty/target/scala-2.12/stainless-dotty_2.12-0.7.4-4-g7ab71b3-SNAPSHOT.pom
[warn] insecure HTTP request is deprecated 'http://dl.bintray.com/tpolecat/maven'; switch to HTTPS or opt-in as ("tpolecat" at "http://dl.bintray.com/tpolecat/maven").withAllowInsecureProtocol(true)
[warn] insecure HTTP request is deprecated 'http://logicrunch.research.it.uu.se/maven'; switch to HTTPS or opt-in as ("uuverifiers" at "http://logicrunch.research.it.uu.se/maven").withAllowInsecureProtocol(true)
[info] Compiling 210 Scala sources to /localhome/raya/Desktop/lara/stainless/core/target/scala-2.12/classes ...
TREE: Seq(<tpe: error>)
TRANSFORM: null
TREE: scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>))
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)))
TREE: {
  val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
  val old: Boolean = transformer.this.inLambda;
  transformer.this.inLambda_=(true);
  val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
    val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
    val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
    val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
    {
      <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
      <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
      <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
      arg.copy(x$2, x$1, x$3)
    }
  }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
  val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
  val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
  val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
  val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
  val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
  val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
  val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
  val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
  Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
  transformer.this.inLambda_=(old);
  Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: matchEnd5({
  val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
  val old: Boolean = transformer.this.inLambda;
  transformer.this.inLambda_=(true);
  val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
    val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
    val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
    val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
    {
      <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
      <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
      <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
      arg.copy(x$2, x$1, x$3)
    }
  }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
  val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
  val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
  val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
  val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
  val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
  val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
  val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
  val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
  Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
  transformer.this.inLambda_=(old);
  Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
})
TREE: {
  if (x1.ne(null).unary_!)
    {
      case7();
      ()
    };
  val id: inox.ast.Identifier = x1._1;
  val l: Strengthener.this.checker.program.trees.Expr = x1._2;
  if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
    {
      case7();
      ()
    };
  <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
  val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
  val body: Strengthener.this.checker.program.trees.Expr = x2.body;
  if (analysis.isApplied(x2).unary_!)
    {
      case7();
      ()
    };
  matchEnd5({
    val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
    val old: Boolean = transformer.this.inLambda;
    transformer.this.inLambda_=(true);
    val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
      val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
      val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
      val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
      {
        <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
        <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
        <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
        arg.copy(x$2, x$1, x$3)
      }
    }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
    val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
    val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
    val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
    val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
    val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
    val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
    val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
    val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
    Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
    transformer.this.inLambda_=(old);
    Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
  })
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: case6(){
  if (x1.ne(null).unary_!)
    {
      case7();
      ()
    };
  val id: inox.ast.Identifier = x1._1;
  val l: Strengthener.this.checker.program.trees.Expr = x1._2;
  if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
    {
      case7();
      ()
    };
  <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
  val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
  val body: Strengthener.this.checker.program.trees.Expr = x2.body;
  if (analysis.isApplied(x2).unary_!)
    {
      case7();
      ()
    };
  matchEnd5({
    val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
    val old: Boolean = transformer.this.inLambda;
    transformer.this.inLambda_=(true);
    val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
      val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
      val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
      val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
      {
        <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
        <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
        <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
        arg.copy(x$2, x$1, x$3)
      }
    }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
    val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
    val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
    val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
    val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
    val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
    val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
    val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
    val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
    Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
    transformer.this.inLambda_=(old);
    Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
  })
}
TREE: {
  case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
  case6(){
    if (x1.ne(null).unary_!)
      {
        case7();
        ()
      };
    val id: inox.ast.Identifier = x1._1;
    val l: Strengthener.this.checker.program.trees.Expr = x1._2;
    if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
      {
        case7();
        ()
      };
    <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
    val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
    val body: Strengthener.this.checker.program.trees.Expr = x2.body;
    if (analysis.isApplied(x2).unary_!)
      {
        case7();
        ()
      };
    matchEnd5({
      val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
      val old: Boolean = transformer.this.inLambda;
      transformer.this.inLambda_=(true);
      val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
        val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
        val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
        val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
        {
          <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
          <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
          <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
          arg.copy(x$2, x$1, x$3)
        }
      }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
      val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
      val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
      val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
      val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
      val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
      val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
      Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
      transformer.this.inLambda_=(old);
      Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
    })
  };
  case7(){
    if (x1.ne(null).unary_!)
      {
        case8();
        ()
      };
    val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
    matchEnd5(transformer.this.transform(arg, path))
  };
  case8(){
    matchEnd5(throw new MatchError(x1))
  };
  matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
    x
  }
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: ((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
  case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
  case6(){
    if (x1.ne(null).unary_!)
      {
        case7();
        ()
      };
    val id: inox.ast.Identifier = x1._1;
    val l: Strengthener.this.checker.program.trees.Expr = x1._2;
    if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
      {
        case7();
        ()
      };
    <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
    val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
    val body: Strengthener.this.checker.program.trees.Expr = x2.body;
    if (analysis.isApplied(x2).unary_!)
      {
        case7();
        ()
      };
    matchEnd5({
      val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
      val old: Boolean = transformer.this.inLambda;
      transformer.this.inLambda_=(true);
      val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
        val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
        val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
        val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
        {
          <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
          <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
          <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
          arg.copy(x$2, x$1, x$3)
        }
      }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
      val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
      val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
      val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
      val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
      val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
      val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
      Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
      transformer.this.inLambda_=(old);
      Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
    })
  };
  case7(){
    if (x1.ne(null).unary_!)
      {
        case8();
        ()
      };
    val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
    matchEnd5(transformer.this.transform(arg, path))
  };
  case8(){
    matchEnd5(throw new MatchError(x1))
  };
  matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
    x
  }
})
TRANSFORM: null
TREE: Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
  case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
  case6(){
    if (x1.ne(null).unary_!)
      {
        case7();
        ()
      };
    val id: inox.ast.Identifier = x1._1;
    val l: Strengthener.this.checker.program.trees.Expr = x1._2;
    if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
      {
        case7();
        ()
      };
    <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
    val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
    val body: Strengthener.this.checker.program.trees.Expr = x2.body;
    if (analysis.isApplied(x2).unary_!)
      {
        case7();
        ()
      };
    matchEnd5({
      val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
      val old: Boolean = transformer.this.inLambda;
      transformer.this.inLambda_=(true);
      val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
        val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
        val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
        val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
        {
          <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
          <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
          <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
          arg.copy(x$2, x$1, x$3)
        }
      }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
      val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
      val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
      val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
      val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
      val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
      val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
      Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
      transformer.this.inLambda_=(old);
      Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
    })
  };
  case7(){
    if (x1.ne(null).unary_!)
      {
        case8();
        ()
      };
    val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
    matchEnd5(transformer.this.transform(arg, path))
  };
  case8(){
    matchEnd5(throw new MatchError(x1))
  };
  matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
    x
  }
}))
TRANSFORM: null
TREE: Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
  case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
  case6(){
    if (x1.ne(null).unary_!)
      {
        case7();
        ()
      };
    val id: inox.ast.Identifier = x1._1;
    val l: Strengthener.this.checker.program.trees.Expr = x1._2;
    if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
      {
        case7();
        ()
      };
    <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
    val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
    val body: Strengthener.this.checker.program.trees.Expr = x2.body;
    if (analysis.isApplied(x2).unary_!)
      {
        case7();
        ()
      };
    matchEnd5({
      val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
      val old: Boolean = transformer.this.inLambda;
      transformer.this.inLambda_=(true);
      val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
        val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
        val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
        val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
        {
          <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
          <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
          <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
          arg.copy(x$2, x$1, x$3)
        }
      }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
      val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
      val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
      val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
      val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
      val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
      val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
      Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
      transformer.this.inLambda_=(old);
      Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
    })
  };
  case7(){
    if (x1.ne(null).unary_!)
      {
        case8();
        ()
      };
    val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
    matchEnd5(transformer.this.transform(arg, path))
  };
  case8(){
    matchEnd5(throw new MatchError(x1))
  };
  matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
    x
  }
}))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr])
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
  case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
  case6(){
    if (x1.ne(null).unary_!)
      {
        case7();
        ()
      };
    val id: inox.ast.Identifier = x1._1;
    val l: Strengthener.this.checker.program.trees.Expr = x1._2;
    if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
      {
        case7();
        ()
      };
    <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
    val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
    val body: Strengthener.this.checker.program.trees.Expr = x2.body;
    if (analysis.isApplied(x2).unary_!)
      {
        case7();
        ()
      };
    matchEnd5({
      val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
      val old: Boolean = transformer.this.inLambda;
      transformer.this.inLambda_=(true);
      val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
        val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
        val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
        val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
        {
          <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
          <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
          <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
          arg.copy(x$2, x$1, x$3)
        }
      }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
      val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
      val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
      val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
      val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
      val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
      val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
      Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
      transformer.this.inLambda_=(old);
      Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
    })
  };
  case7(){
    if (x1.ne(null).unary_!)
      {
        case8();
        ()
      };
    val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
    matchEnd5(transformer.this.transform(arg, path))
  };
  case8(){
    matchEnd5(throw new MatchError(x1))
  };
  matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
    x
  }
}))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr])
TREE: {
  <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
    case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
    case6(){
      if (x1.ne(null).unary_!)
        {
          case7();
          ()
        };
      val id: inox.ast.Identifier = x1._1;
      val l: Strengthener.this.checker.program.trees.Expr = x1._2;
      if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
        {
          case7();
          ()
        };
      <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
      val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
      val body: Strengthener.this.checker.program.trees.Expr = x2.body;
      if (analysis.isApplied(x2).unary_!)
        {
          case7();
          ()
        };
      matchEnd5({
        val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
        val old: Boolean = transformer.this.inLambda;
        transformer.this.inLambda_=(true);
        val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
          val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
          val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
          val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
          {
            <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
            <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
            <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
            arg.copy(x$2, x$1, x$3)
          }
        }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
        val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
        val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
        val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
        val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
        val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
        val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
        val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
        val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
        Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
        transformer.this.inLambda_=(old);
        Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
      })
    };
    case7(){
      if (x1.ne(null).unary_!)
        {
          case8();
          ()
        };
      val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
      matchEnd5(transformer.this.transform(arg, path))
    };
    case8(){
      matchEnd5(throw new MatchError(x1))
    };
    matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
      x
    }
  }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
  <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
  <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
  x2.copy(x$5, x$6, x$4)
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: matchEnd6({
  <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
    case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
    case6(){
      if (x1.ne(null).unary_!)
        {
          case7();
          ()
        };
      val id: inox.ast.Identifier = x1._1;
      val l: Strengthener.this.checker.program.trees.Expr = x1._2;
      if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
        {
          case7();
          ()
        };
      <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
      val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
      val body: Strengthener.this.checker.program.trees.Expr = x2.body;
      if (analysis.isApplied(x2).unary_!)
        {
          case7();
          ()
        };
      matchEnd5({
        val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
        val old: Boolean = transformer.this.inLambda;
        transformer.this.inLambda_=(true);
        val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
          val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
          val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
          val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
          {
            <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
            <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
            <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
            arg.copy(x$2, x$1, x$3)
          }
        }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
        val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
        val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
        val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
        val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
        val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
        val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
        val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
        val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
        Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
        transformer.this.inLambda_=(old);
        Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
      })
    };
    case7(){
      if (x1.ne(null).unary_!)
        {
          case8();
          ()
        };
      val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
      matchEnd5(transformer.this.transform(arg, path))
    };
    case8(){
      matchEnd5(throw new MatchError(x1))
    };
    matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
      x
    }
  }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
  <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
  <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
  x2.copy(x$5, x$6, x$4)
})
TREE: {
  if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
    {
      case8();
      ()
    };
  <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
  val fid: inox.ast.Identifier = x2.id;
  val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
  matchEnd6({
    <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
      case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
      case6(){
        if (x1.ne(null).unary_!)
          {
            case7();
            ()
          };
        val id: inox.ast.Identifier = x1._1;
        val l: Strengthener.this.checker.program.trees.Expr = x1._2;
        if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
          {
            case7();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
        val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
        val body: Strengthener.this.checker.program.trees.Expr = x2.body;
        if (analysis.isApplied(x2).unary_!)
          {
            case7();
            ()
          };
        matchEnd5({
          val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
          val old: Boolean = transformer.this.inLambda;
          transformer.this.inLambda_=(true);
          val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
            val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
            val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
            val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
            {
              <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
              <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
              <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
              arg.copy(x$2, x$1, x$3)
            }
          }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
          val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
          val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
          val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
          val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
          val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
          val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
          val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
          val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
          Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
          transformer.this.inLambda_=(old);
          Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
        })
      };
      case7(){
        if (x1.ne(null).unary_!)
          {
            case8();
            ()
          };
        val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
        matchEnd5(transformer.this.transform(arg, path))
      };
      case8(){
        matchEnd5(throw new MatchError(x1))
      };
      matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
        x
      }
    }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
    <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
    <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
    x2.copy(x$5, x$6, x$4)
  })
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: case7(){
  if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
    {
      case8();
      ()
    };
  <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
  val fid: inox.ast.Identifier = x2.id;
  val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
  matchEnd6({
    <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
      case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
      case6(){
        if (x1.ne(null).unary_!)
          {
            case7();
            ()
          };
        val id: inox.ast.Identifier = x1._1;
        val l: Strengthener.this.checker.program.trees.Expr = x1._2;
        if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
          {
            case7();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
        val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
        val body: Strengthener.this.checker.program.trees.Expr = x2.body;
        if (analysis.isApplied(x2).unary_!)
          {
            case7();
            ()
          };
        matchEnd5({
          val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
          val old: Boolean = transformer.this.inLambda;
          transformer.this.inLambda_=(true);
          val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
            val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
            val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
            val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
            {
              <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
              <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
              <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
              arg.copy(x$2, x$1, x$3)
            }
          }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
          val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
          val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
          val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
          val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
          val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
          val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
          val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
          val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
          Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
          transformer.this.inLambda_=(old);
          Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
        })
      };
      case7(){
        if (x1.ne(null).unary_!)
          {
            case8();
            ()
          };
        val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
        matchEnd5(transformer.this.transform(arg, path))
      };
      case8(){
        matchEnd5(throw new MatchError(x1))
      };
      matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
        x
      }
    }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
    <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
    <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
    x2.copy(x$5, x$6, x$4)
  })
}
TREE: {
  case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = e;
  case7(){
    if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
      {
        case8();
        ()
      };
    <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
    val fid: inox.ast.Identifier = x2.id;
    val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
    matchEnd6({
      <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
        case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
        case6(){
          if (x1.ne(null).unary_!)
            {
              case7();
              ()
            };
          val id: inox.ast.Identifier = x1._1;
          val l: Strengthener.this.checker.program.trees.Expr = x1._2;
          if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
            {
              case7();
              ()
            };
          <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
          val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
          val body: Strengthener.this.checker.program.trees.Expr = x2.body;
          if (analysis.isApplied(x2).unary_!)
            {
              case7();
              ()
            };
          matchEnd5({
            val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
            val old: Boolean = transformer.this.inLambda;
            transformer.this.inLambda_=(true);
            val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
              val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
              val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
              val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
              {
                <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
                <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
                <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
                arg.copy(x$2, x$1, x$3)
              }
            }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
            val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
            val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
            val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
            val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
            val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
            val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
            val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
            val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
            Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
            transformer.this.inLambda_=(old);
            Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
          })
        };
        case7(){
          if (x1.ne(null).unary_!)
            {
              case8();
              ()
            };
          val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
          matchEnd5(transformer.this.transform(arg, path))
        };
        case8(){
          matchEnd5(throw new MatchError(x1))
        };
        matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
          x
        }
      }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
      <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
      <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
      x2.copy(x$5, x$6, x$4)
    })
  };
  case8(){
    if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
      {
        case9();
        ()
      };
    <synthetic> val x4: Strengthener.this.checker.program.trees.Lambda = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
    matchEnd6(if (analysis.isApplied(x4))
      {
        val old: Boolean = transformer.this.inLambda;
        transformer.this.inLambda_=(true);
        val res: stainless.termination.Strengthener.transformer.t.Expr = transformer.super.transform(e, path);
        transformer.this.inLambda_=(old);
        res
      }
    else
      x4)
  };
  case9(){
    matchEnd6(transformer.super.transform(e, path))
  };
  matchEnd6(x: Strengthener.this.checker.program.trees.Expr){
    x
  }
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: override def transform(e: Strengthener.this.checker.program.trees.Expr, path: Strengthener.this.checker.program.trees.Path): Strengthener.this.checker.program.trees.Expr = {
  case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = e;
  case7(){
    if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
      {
        case8();
        ()
      };
    <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
    val fid: inox.ast.Identifier = x2.id;
    val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
    matchEnd6({
      <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
        case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
        case6(){
          if (x1.ne(null).unary_!)
            {
              case7();
              ()
            };
          val id: inox.ast.Identifier = x1._1;
          val l: Strengthener.this.checker.program.trees.Expr = x1._2;
          if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
            {
              case7();
              ()
            };
          <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
          val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
          val body: Strengthener.this.checker.program.trees.Expr = x2.body;
          if (analysis.isApplied(x2).unary_!)
            {
              case7();
              ()
            };
          matchEnd5({
            val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
            val old: Boolean = transformer.this.inLambda;
            transformer.this.inLambda_=(true);
            val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
              val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
              val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
              val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
              {
                <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
                <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
                <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
                arg.copy(x$2, x$1, x$3)
              }
            }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
            val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
            val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
            val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
            val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
            val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
            val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
            val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
            val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
            Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
            transformer.this.inLambda_=(old);
            Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
          })
        };
        case7(){
          if (x1.ne(null).unary_!)
            {
              case8();
              ()
            };
          val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
          matchEnd5(transformer.this.transform(arg, path))
        };
        case8(){
          matchEnd5(throw new MatchError(x1))
        };
        matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
          x
        }
      }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
      <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
      <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
      x2.copy(x$5, x$6, x$4)
    })
  };
  case8(){
    if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
      {
        case9();
        ()
      };
    <synthetic> val x4: Strengthener.this.checker.program.trees.Lambda = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
    matchEnd6(if (analysis.isApplied(x4))
      {
        val old: Boolean = transformer.this.inLambda;
        transformer.this.inLambda_=(true);
        val res: stainless.termination.Strengthener.transformer.t.Expr = transformer.super.transform(e, path);
        transformer.this.inLambda_=(old);
        res
      }
    else
      x4)
  };
  case9(){
    matchEnd6(transformer.super.transform(e, path))
  };
  matchEnd6(x: Strengthener.this.checker.program.trees.Expr){
    x
  }
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: AnyRef with stainless.transformers.TransformerWithPC with stainless.transformers.DefinitionTransformer {
  def <init>(): transformer.type = {
    transformer.super.<init>();
    ()
  };
  private[this] val s: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
  <stable> <accessor> def s: Strengthener.this.checker.program.trees.type = transformer.this.s;
  private[this] val t: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
  <stable> <accessor> def t: Strengthener.this.checker.program.trees.type = transformer.this.t;
  private[this] val symbols: Strengthener.this.checker.program.symbols.type = Strengthener.this.checker.program.symbols;
  <stable> <accessor> def symbols: Strengthener.this.checker.program.symbols.type = transformer.this.symbols;
  type Env = Strengthener.this.checker.program.trees.Path;
  private[this] val initEnv: Strengthener.this.checker.program.trees.Path = Strengthener.this.checker.program.trees.Path.empty;
  <stable> <accessor> def initEnv: Strengthener.this.checker.program.trees.Path = transformer.this.initEnv;
  private[this] val pp: Strengthener.this.checker.program.trees.Path.type = Strengthener.this.checker.program.trees.Path;
  <stable> <accessor> def pp: Strengthener.this.checker.program.trees.Path.type = transformer.this.pp;
  private[this] var inLambda: Boolean = false;
  <accessor> def inLambda: Boolean = transformer.this.inLambda;
  <accessor> def inLambda_=(x$1: Boolean): Unit = transformer.this.inLambda = x$1;
  override def transform(e: Strengthener.this.checker.program.trees.Expr, path: Strengthener.this.checker.program.trees.Path): Strengthener.this.checker.program.trees.Expr = {
    case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = e;
    case7(){
      if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
        {
          case8();
          ()
        };
      <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
      val fid: inox.ast.Identifier = x2.id;
      val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
      matchEnd6({
        <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
          case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
          case6(){
            if (x1.ne(null).unary_!)
              {
                case7();
                ()
              };
            val id: inox.ast.Identifier = x1._1;
            val l: Strengthener.this.checker.program.trees.Expr = x1._2;
            if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
              {
                case7();
                ()
              };
            <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
            val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
            val body: Strengthener.this.checker.program.trees.Expr = x2.body;
            if (analysis.isApplied(x2).unary_!)
              {
                case7();
                ()
              };
            matchEnd5({
              val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
              val old: Boolean = transformer.this.inLambda;
              transformer.this.inLambda_=(true);
              val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
                val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
                val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
                val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
                {
                  <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
                  <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
                  <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
                  arg.copy(x$2, x$1, x$3)
                }
              }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
              val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
              val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
              val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
              val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
              val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
              val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
              val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
              val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
              Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
              transformer.this.inLambda_=(old);
              Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
            })
          };
          case7(){
            if (x1.ne(null).unary_!)
              {
                case8();
                ()
              };
            val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
            matchEnd5(transformer.this.transform(arg, path))
          };
          case8(){
            matchEnd5(throw new MatchError(x1))
          };
          matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
            x
          }
        }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
        <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
        <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
        x2.copy(x$5, x$6, x$4)
      })
    };
    case8(){
      if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
        {
          case9();
          ()
        };
      <synthetic> val x4: Strengthener.this.checker.program.trees.Lambda = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
      matchEnd6(if (analysis.isApplied(x4))
        {
          val old: Boolean = transformer.this.inLambda;
          transformer.this.inLambda_=(true);
          val res: stainless.termination.Strengthener.transformer.t.Expr = transformer.super.transform(e, path);
          transformer.this.inLambda_=(old);
          res
        }
      else
        x4)
    };
    case9(){
      matchEnd6(transformer.super.transform(e, path))
    };
    matchEnd6(x: Strengthener.this.checker.program.trees.Expr){
      x
    }
  }
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: object transformer extends AnyRef with stainless.transformers.TransformerWithPC with stainless.transformers.DefinitionTransformer {
  def <init>(): transformer.type = {
    transformer.super.<init>();
    ()
  };
  private[this] val s: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
  <stable> <accessor> def s: Strengthener.this.checker.program.trees.type = transformer.this.s;
  private[this] val t: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
  <stable> <accessor> def t: Strengthener.this.checker.program.trees.type = transformer.this.t;
  private[this] val symbols: Strengthener.this.checker.program.symbols.type = Strengthener.this.checker.program.symbols;
  <stable> <accessor> def symbols: Strengthener.this.checker.program.symbols.type = transformer.this.symbols;
  type Env = Strengthener.this.checker.program.trees.Path;
  private[this] val initEnv: Strengthener.this.checker.program.trees.Path = Strengthener.this.checker.program.trees.Path.empty;
  <stable> <accessor> def initEnv: Strengthener.this.checker.program.trees.Path = transformer.this.initEnv;
  private[this] val pp: Strengthener.this.checker.program.trees.Path.type = Strengthener.this.checker.program.trees.Path;
  <stable> <accessor> def pp: Strengthener.this.checker.program.trees.Path.type = transformer.this.pp;
  private[this] var inLambda: Boolean = false;
  <accessor> def inLambda: Boolean = transformer.this.inLambda;
  <accessor> def inLambda_=(x$1: Boolean): Unit = transformer.this.inLambda = x$1;
  override def transform(e: Strengthener.this.checker.program.trees.Expr, path: Strengthener.this.checker.program.trees.Path): Strengthener.this.checker.program.trees.Expr = {
    case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = e;
    case7(){
      if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
        {
          case8();
          ()
        };
      <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
      val fid: inox.ast.Identifier = x2.id;
      val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
      matchEnd6({
        <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
          case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
          case6(){
            if (x1.ne(null).unary_!)
              {
                case7();
                ()
              };
            val id: inox.ast.Identifier = x1._1;
            val l: Strengthener.this.checker.program.trees.Expr = x1._2;
            if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
              {
                case7();
                ()
              };
            <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
            val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
            val body: Strengthener.this.checker.program.trees.Expr = x2.body;
            if (analysis.isApplied(x2).unary_!)
              {
                case7();
                ()
              };
            matchEnd5({
              val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
              val old: Boolean = transformer.this.inLambda;
              transformer.this.inLambda_=(true);
              val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
                val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
                val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
                val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
                {
                  <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
                  <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
                  <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
                  arg.copy(x$2, x$1, x$3)
                }
              }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
              val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
              val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
              val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
              val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
              val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
              val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
              val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
              val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
              Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
              transformer.this.inLambda_=(old);
              Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
            })
          };
          case7(){
            if (x1.ne(null).unary_!)
              {
                case8();
                ()
              };
            val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
            matchEnd5(transformer.this.transform(arg, path))
          };
          case8(){
            matchEnd5(throw new MatchError(x1))
          };
          matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
            x
          }
        }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
        <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
        <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
        x2.copy(x$5, x$6, x$4)
      })
    };
    case8(){
      if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
        {
          case9();
          ()
        };
      <synthetic> val x4: Strengthener.this.checker.program.trees.Lambda = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
      matchEnd6(if (analysis.isApplied(x4))
        {
          val old: Boolean = transformer.this.inLambda;
          transformer.this.inLambda_=(true);
          val res: stainless.termination.Strengthener.transformer.t.Expr = transformer.super.transform(e, path);
          transformer.this.inLambda_=(old);
          res
        }
      else
        x4)
    };
    case9(){
      matchEnd6(transformer.super.transform(e, path))
    };
    matchEnd6(x: Strengthener.this.checker.program.trees.Expr){
      x
    }
  }
}
TREE: {
  val analysis: Strengthener.this.cfa.Analysis = Strengthener.this.cfa.analyze(funDef.id);
  object transformer extends AnyRef with stainless.transformers.TransformerWithPC with stainless.transformers.DefinitionTransformer {
    def <init>(): transformer.type = {
      transformer.super.<init>();
      ()
    };
    private[this] val s: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
    <stable> <accessor> def s: Strengthener.this.checker.program.trees.type = transformer.this.s;
    private[this] val t: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
    <stable> <accessor> def t: Strengthener.this.checker.program.trees.type = transformer.this.t;
    private[this] val symbols: Strengthener.this.checker.program.symbols.type = Strengthener.this.checker.program.symbols;
    <stable> <accessor> def symbols: Strengthener.this.checker.program.symbols.type = transformer.this.symbols;
    type Env = Strengthener.this.checker.program.trees.Path;
    private[this] val initEnv: Strengthener.this.checker.program.trees.Path = Strengthener.this.checker.program.trees.Path.empty;
    <stable> <accessor> def initEnv: Strengthener.this.checker.program.trees.Path = transformer.this.initEnv;
    private[this] val pp: Strengthener.this.checker.program.trees.Path.type = Strengthener.this.checker.program.trees.Path;
    <stable> <accessor> def pp: Strengthener.this.checker.program.trees.Path.type = transformer.this.pp;
    private[this] var inLambda: Boolean = false;
    <accessor> def inLambda: Boolean = transformer.this.inLambda;
    <accessor> def inLambda_=(x$1: Boolean): Unit = transformer.this.inLambda = x$1;
    override def transform(e: Strengthener.this.checker.program.trees.Expr, path: Strengthener.this.checker.program.trees.Path): Strengthener.this.checker.program.trees.Expr = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = e;
      case7(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
        val fid: inox.ast.Identifier = x2.id;
        val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
        matchEnd6({
          <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
            case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
            case6(){
              if (x1.ne(null).unary_!)
                {
                  case7();
                  ()
                };
              val id: inox.ast.Identifier = x1._1;
              val l: Strengthener.this.checker.program.trees.Expr = x1._2;
              if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
                {
                  case7();
                  ()
                };
              <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
              val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
              val body: Strengthener.this.checker.program.trees.Expr = x2.body;
              if (analysis.isApplied(x2).unary_!)
                {
                  case7();
                  ()
                };
              matchEnd5({
                val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
                val old: Boolean = transformer.this.inLambda;
                transformer.this.inLambda_=(true);
                val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
                  val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
                  val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
                  val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
                  {
                    <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
                    <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
                    <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
                    arg.copy(x$2, x$1, x$3)
                  }
                }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
                val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
                val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
                val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
                val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
                Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
                transformer.this.inLambda_=(old);
                Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
              })
            };
            case7(){
              if (x1.ne(null).unary_!)
                {
                  case8();
                  ()
                };
              val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
              matchEnd5(transformer.this.transform(arg, path))
            };
            case8(){
              matchEnd5(throw new MatchError(x1))
            };
            matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
              x
            }
          }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
          <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
          <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
          x2.copy(x$5, x$6, x$4)
        })
      };
      case8(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
          {
            case9();
            ()
          };
        <synthetic> val x4: Strengthener.this.checker.program.trees.Lambda = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
        matchEnd6(if (analysis.isApplied(x4))
          {
            val old: Boolean = transformer.this.inLambda;
            transformer.this.inLambda_=(true);
            val res: stainless.termination.Strengthener.transformer.t.Expr = transformer.super.transform(e, path);
            transformer.this.inLambda_=(old);
            res
          }
        else
          x4)
      };
      case9(){
        matchEnd6(transformer.super.transform(e, path))
      };
      matchEnd6(x: Strengthener.this.checker.program.trees.Expr){
        x
      }
    }
  };
  transformer.transform(funDef)
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: def annotateStrength(funDef: Strengthener.this.checker.program.trees.FunDef): Strengthener.this.checker.program.trees.FunDef = {
  val analysis: Strengthener.this.cfa.Analysis = Strengthener.this.cfa.analyze(funDef.id);
  object transformer extends AnyRef with stainless.transformers.TransformerWithPC with stainless.transformers.DefinitionTransformer {
    def <init>(): transformer.type = {
      transformer.super.<init>();
      ()
    };
    private[this] val s: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
    <stable> <accessor> def s: Strengthener.this.checker.program.trees.type = transformer.this.s;
    private[this] val t: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
    <stable> <accessor> def t: Strengthener.this.checker.program.trees.type = transformer.this.t;
    private[this] val symbols: Strengthener.this.checker.program.symbols.type = Strengthener.this.checker.program.symbols;
    <stable> <accessor> def symbols: Strengthener.this.checker.program.symbols.type = transformer.this.symbols;
    type Env = Strengthener.this.checker.program.trees.Path;
    private[this] val initEnv: Strengthener.this.checker.program.trees.Path = Strengthener.this.checker.program.trees.Path.empty;
    <stable> <accessor> def initEnv: Strengthener.this.checker.program.trees.Path = transformer.this.initEnv;
    private[this] val pp: Strengthener.this.checker.program.trees.Path.type = Strengthener.this.checker.program.trees.Path;
    <stable> <accessor> def pp: Strengthener.this.checker.program.trees.Path.type = transformer.this.pp;
    private[this] var inLambda: Boolean = false;
    <accessor> def inLambda: Boolean = transformer.this.inLambda;
    <accessor> def inLambda_=(x$1: Boolean): Unit = transformer.this.inLambda = x$1;
    override def transform(e: Strengthener.this.checker.program.trees.Expr, path: Strengthener.this.checker.program.trees.Path): Strengthener.this.checker.program.trees.Expr = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = e;
      case7(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
        val fid: inox.ast.Identifier = x2.id;
        val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
        matchEnd6({
          <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
            case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
            case6(){
              if (x1.ne(null).unary_!)
                {
                  case7();
                  ()
                };
              val id: inox.ast.Identifier = x1._1;
              val l: Strengthener.this.checker.program.trees.Expr = x1._2;
              if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
                {
                  case7();
                  ()
                };
              <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
              val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
              val body: Strengthener.this.checker.program.trees.Expr = x2.body;
              if (analysis.isApplied(x2).unary_!)
                {
                  case7();
                  ()
                };
              matchEnd5({
                val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
                val old: Boolean = transformer.this.inLambda;
                transformer.this.inLambda_=(true);
                val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
                  val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
                  val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
                  val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
                  {
                    <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
                    <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
                    <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
                    arg.copy(x$2, x$1, x$3)
                  }
                }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
                val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
                val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
                val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
                val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
                Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
                transformer.this.inLambda_=(old);
                Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
              })
            };
            case7(){
              if (x1.ne(null).unary_!)
                {
                  case8();
                  ()
                };
              val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
              matchEnd5(transformer.this.transform(arg, path))
            };
            case8(){
              matchEnd5(throw new MatchError(x1))
            };
            matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
              x
            }
          }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
          <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
          <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
          x2.copy(x$5, x$6, x$4)
        })
      };
      case8(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
          {
            case9();
            ()
          };
        <synthetic> val x4: Strengthener.this.checker.program.trees.Lambda = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
        matchEnd6(if (analysis.isApplied(x4))
          {
            val old: Boolean = transformer.this.inLambda;
            transformer.this.inLambda_=(true);
            val res: stainless.termination.Strengthener.transformer.t.Expr = transformer.super.transform(e, path);
            transformer.this.inLambda_=(old);
            res
          }
        else
          x4)
      };
      case9(){
        matchEnd6(transformer.super.transform(e, path))
      };
      matchEnd6(x: Strengthener.this.checker.program.trees.Expr){
        x
      }
    }
  };
  transformer.transform(funDef)
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: scala.AnyRef { self: stainless.termination.Strengthener with stainless.termination.OrderingRelation => 
  def /*Strengthener*/$init$(): Unit = {
    ()
  };
  <stable> <accessor> val checker: stainless.termination.ProcessingPipeline;
  import Strengthener.this.checker._;
  import Strengthener.this.checker.context._;
  import Strengthener.this.checker.program._;
  import Strengthener.this.checker.program.trees._;
  import Strengthener.this.checker.program.symbols._;
  import Strengthener.this.checker.program.symbols.CallGraphOrderings._;
  <stable> <accessor> private val strengthenedPost: scala.collection.mutable.Map[stainless.Identifier,Option[Strengthener.this.checker.program.trees.Lambda]] = scala.collection.mutable.Map.empty[stainless.Identifier, Option[Strengthener.this.checker.program.trees.Lambda]];
  <stable> <accessor> lazy private val ignorePosts: Boolean = Strengthener.this.checker.context.options.findOptionOrDefault[Boolean](optIgnorePosts)((ClassTag.Boolean: scala.reflect.ClassTag[Boolean]));
  private object postStrengthener extends AnyRef with Strengthener.this.checker.program.trees.IdentitySymbolTransformer {
    def <init>(): Strengthener.this.postStrengthener.type = {
      postStrengthener.super.<init>();
      ()
    };
    override def transform(syms: Strengthener.this.checker.program.trees.Symbols): Strengthener.this.checker.program.trees.Symbols = syms.withFunctions(syms.functions.toSeq.map[Strengthener.this.checker.program.trees.FunDef, Seq[Strengthener.this.checker.program.trees.FunDef]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.FunDef)) => {
      case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.FunDef) = x0$1;
      case4(){
        if (x1.ne(null).unary_!)
          {
            case5();
            ()
          };
        val id: inox.ast.Identifier = x1._1;
        val fd: Strengthener.this.checker.program.trees.FunDef = x1._2;
        matchEnd3({
          case <synthetic> val x1: Option[Option[Strengthener.this.checker.program.trees.Lambda]] = Strengthener.this.strengthenedPost.get(id);
          case7(){
            if (x1.isInstanceOf[Some[Option[Strengthener.this.checker.program.trees.Lambda]]].unary_!)
              {
                case8();
                ()
              };
            <synthetic> val x2: Some[Option[Strengthener.this.checker.program.trees.Lambda]] = (x1.asInstanceOf[Some[Option[Strengthener.this.checker.program.trees.Lambda]]]: Some[Option[Strengthener.this.checker.program.trees.Lambda]]);
            val post: Option[Strengthener.this.checker.program.trees.Lambda] = x2.value;
            if (post.isInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]].unary_!)
              {
                case8();
                ()
              };
            <synthetic> val x3: Some[Strengthener.this.checker.program.trees.Lambda] = (post.asInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]]: Some[Strengthener.this.checker.program.trees.Lambda]);
            matchEnd6({
              <artifact> val x$1: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.withPostcondition(fd.fullBody, x3);
              <artifact> val x$2: inox.ast.Identifier = fd.copy$default$1;
              <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.TypeParameterDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$2;
              <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.ValDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$3;
              <artifact> val x$5: Strengthener.this.checker.program.trees.Type = fd.copy$default$4;
              <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$6;
              fd.copy(x$2, x$3, x$4, x$5, x$1, x$6)
            })
          };
          case8(){
            matchEnd6(fd)
          };
          matchEnd6(x: Strengthener.this.checker.program.trees.FunDef){
            x
          }
        })
      };
      case5(){
        matchEnd3(throw new MatchError(x1))
      };
      matchEnd3(x: Strengthener.this.checker.program.trees.FunDef){
        x
      }
    }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.FunDef]))
  };
  Strengthener.this.registerTransformer(Strengthener.this.postStrengthener);
  def strengthenPostconditions(funDefs: Set[Strengthener.this.checker.program.trees.FunDef])(implicit dbg: inox.DebugSection): Unit = {
    Strengthener.this.checker.context.reporter.debug("- Strengthening postconditions")(dbg);
    val callees: Set[Strengthener.this.checker.program.trees.FunDef] = funDefs.flatMap[Strengthener.this.checker.program.symbols.trees.FunDef, Set[Strengthener.this.checker.program.trees.FunDef]](((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.symbols.transitiveCallees(fd)))(immutable.this.Set.canBuildFrom[Strengthener.this.checker.program.trees.FunDef]);
    val sortedCallees: Seq[Strengthener.this.checker.program.trees.FunDef] = callees.toSeq.sorted[Strengthener.this.checker.program.trees.FunDef](Strengthener.this.checker.program.symbols.CallGraphOrderings.functionOrdering);
    sortedCallees.withFilter(((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).isDefined.&&(Strengthener.this.strengthenedPost.isDefinedAt(fd.id).unary_!).&&(Strengthener.this.checker.terminates(fd).isGuaranteed))).foreach[Unit](((fd: Strengthener.this.checker.program.trees.FunDef) => {
      Strengthener.this.strengthenedPost.update(fd.id, scala.None);
      def strengthen(cmp: (Seq[Strengthener.this.checker.program.trees.Expr], Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.checker.program.trees.Expr): Boolean = {
        val postcondition: Strengthener.this.checker.program.trees.Lambda = {
          val res: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("res", fd.returnType, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
          val post: Strengthener.this.checker.program.symbols.trees.Expr = {
            case <synthetic> val x1: Option[Strengthener.this.checker.program.trees.Lambda] = Strengthener.this.checker.program.trees.StainlessFunDef(fd).postcondition(Strengthener.this.checker.program.symbols.implicitSymbols);
            case5(){
              if (x1.isInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]].unary_!)
                {
                  case6();
                  ()
                };
              <synthetic> val x2: Some[Strengthener.this.checker.program.trees.Lambda] = (x1.asInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]]: Some[Strengthener.this.checker.program.trees.Lambda]);
              val post: Strengthener.this.checker.program.trees.Lambda = x2.value;
              if (Strengthener.this.ignorePosts)
                {
                  case6();
                  ()
                };
              matchEnd4(Strengthener.this.checker.program.symbols.application(post, scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Variable](res.toVariable)))
            };
            case6(){
              matchEnd4(Strengthener.this.checker.program.trees.BooleanLiteral.apply(true))
            };
            matchEnd4(x: Strengthener.this.checker.program.symbols.trees.Expr){
              x
            }
          };
          val sizePost: Strengthener.this.checker.program.trees.Expr = cmp.apply(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Variable](res.toVariable), fd.params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$1: Strengthener.this.checker.program.trees.ValDef) => x$1.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
          Strengthener.this.checker.program.trees.Lambda.apply(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.ValDef](res), Strengthener.this.checker.program.trees.and(post, sizePost))
        };
        val formula: Strengthener.this.checker.program.trees.Expr = Strengthener.this.checker.program.trees.implies(Strengthener.this.checker.program.trees.StainlessFunDef(fd).precOrTrue(Strengthener.this.checker.program.symbols.implicitSymbols), Strengthener.this.checker.program.symbols.application(postcondition, scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Expr](Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).get)));
        val strengthener: Strengthener.this.checker.program.trees.IdentitySymbolTransformer = {
          final class $anon extends AnyRef with Strengthener.this.checker.program.trees.IdentitySymbolTransformer {
            def <init>(): <$anon: Strengthener.this.checker.program.trees.IdentitySymbolTransformer> = {
              $anon.super.<init>();
              ()
            };
            override def transform(syms: Strengthener.this.checker.program.trees.Symbols): Strengthener.this.checker.program.trees.Symbols = $anon.super.transform(syms).withFunctions(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.FunDef]({
              <artifact> val x$1: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.withPostcondition(fd.fullBody, scala.Some.apply[Strengthener.this.checker.program.trees.Lambda](postcondition));
              <artifact> val x$2: inox.ast.Identifier = fd.copy$default$1;
              <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.TypeParameterDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$2;
              <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.ValDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$3;
              <artifact> val x$5: Strengthener.this.checker.program.trees.Type = fd.copy$default$4;
              <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$6;
              fd.copy(x$2, x$3, x$4, x$5, x$1, x$6)
            }))
          };
          new $anon()
        };
        val api: inox.solvers.SimpleSolverAPI{val program: inox.Program{val trees: Strengthener.this.checker.program.trees.type}} = Strengthener.this.getAPI(strengthener);
        if (Strengthener.this.checker.program.trees.exprOps.variablesOf(formula).nonEmpty.&&(api.solveVALID(formula).contains[Boolean](true)))
          {
            Strengthener.this.strengthenedPost.update(fd.id, scala.Some.apply[Strengthener.this.checker.program.trees.Lambda](postcondition));
            true
          }
        else
          false
      };
      val weakConstraintHolds: Boolean = strengthen({
        ((args1: Seq[Strengthener.this.checker.program.trees.Expr], args2: Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.lessEquals(args1, args2))
      });
      val strongConstraintHolds: Boolean = if (weakConstraintHolds)
        strengthen({
          ((args1: Seq[Strengthener.this.checker.program.trees.Expr], args2: Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.lessThan(args1, args2))
        })
      else
        false;
      ()
    }))
  };
  sealed abstract class SizeConstraint extends scala.AnyRef {
    def <init>(): Strengthener.this.SizeConstraint = {
      SizeConstraint.super.<init>();
      ()
    }
  };
  case object StrongDecreasing extends Strengthener.this.SizeConstraint with Product with Serializable {
    def <init>(): Strengthener.this.StrongDecreasing.type = {
      StrongDecreasing.super.<init>();
      ()
    };
    override <synthetic> def productPrefix: String = "StrongDecreasing";
    <synthetic> def productArity: Int = 0;
    <synthetic> def productElement(x$1: Int): Any = {
      case <synthetic> val x1: Int = x$1;
      case4(){
        matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
      };
      matchEnd3(x: Any){
        x
      }
    };
    override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](StrongDecreasing.this);
    <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.StrongDecreasing.type]();
    override <synthetic> def hashCode(): Int = -559514638;
    override <synthetic> def toString(): String = "StrongDecreasing"
  };
  case object WeakDecreasing extends Strengthener.this.SizeConstraint with Product with Serializable {
    def <init>(): Strengthener.this.WeakDecreasing.type = {
      WeakDecreasing.super.<init>();
      ()
    };
    override <synthetic> def productPrefix: String = "WeakDecreasing";
    <synthetic> def productArity: Int = 0;
    <synthetic> def productElement(x$1: Int): Any = {
      case <synthetic> val x1: Int = x$1;
      case4(){
        matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
      };
      matchEnd3(x: Any){
        x
      }
    };
    override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](WeakDecreasing.this);
    <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.WeakDecreasing.type]();
    override <synthetic> def hashCode(): Int = -788904045;
    override <synthetic> def toString(): String = "WeakDecreasing"
  };
  case object NoConstraint extends Strengthener.this.SizeConstraint with Product with Serializable {
    def <init>(): Strengthener.this.NoConstraint.type = {
      NoConstraint.super.<init>();
      ()
    };
    override <synthetic> def productPrefix: String = "NoConstraint";
    <synthetic> def productArity: Int = 0;
    <synthetic> def productElement(x$1: Int): Any = {
      case <synthetic> val x1: Int = x$1;
      case4(){
        matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
      };
      matchEnd3(x: Any){
        x
      }
    };
    override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](NoConstraint.this);
    <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.NoConstraint.type]();
    override <synthetic> def hashCode(): Int = 1388500638;
    override <synthetic> def toString(): String = "NoConstraint"
  };
  <stable> <accessor> private val strengthenedApp: scala.collection.mutable.Set[Strengthener.this.checker.program.trees.FunDef] = scala.collection.mutable.Set.empty[Strengthener.this.checker.program.trees.FunDef];
  protected def strengthened(fd: Strengthener.this.checker.program.trees.FunDef): Boolean = Strengthener.this.strengthenedApp.apply(fd);
  <stable> <accessor> private val appConstraint: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Strengthener.this.SizeConstraint] = scala.collection.mutable.Map.empty[(stainless.Identifier, stainless.Identifier), Strengthener.this.SizeConstraint];
  def applicationConstraint(fid: stainless.Identifier, id: stainless.Identifier, largs: Seq[Strengthener.this.checker.program.trees.ValDef], args: Seq[Strengthener.this.checker.program.trees.Expr]): Strengthener.this.checker.program.trees.Expr = {
    <synthetic> var rc9: Boolean = false;
    <synthetic> var x2: Some[Strengthener.this.SizeConstraint] = null.asInstanceOf[Some[Strengthener.this.SizeConstraint]];
    {
      case <synthetic> val x1: Option[Strengthener.this.SizeConstraint] = Strengthener.this.appConstraint.get(scala.Predef.ArrowAssoc[stainless.Identifier](fid).->[stainless.Identifier](id));
      case11(){
        if (x1.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
          {
            case12();
            ()
          };
        rc9 = true;
        x2 = (x1.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
        {
          <synthetic> val p3: Strengthener.this.SizeConstraint = x2.value;
          if (Strengthener.this.StrongDecreasing.==(p3).unary_!)
            {
              case12();
              ()
            };
          matchEnd10(Strengthener.this.lessThan(largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$2: Strengthener.this.checker.program.trees.ValDef) => x$2.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]), args))
        }
      };
      case12(){
        if (rc9.unary_!)
          {
            case13();
            ()
          };
        <synthetic> val p5: Strengthener.this.SizeConstraint = x2.value;
        if (Strengthener.this.WeakDecreasing.==(p5).unary_!)
          {
            case13();
            ()
          };
        matchEnd10(Strengthener.this.lessEquals(largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$3: Strengthener.this.checker.program.trees.ValDef) => x$3.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]), args))
      };
      case13(){
        matchEnd10(Strengthener.this.checker.program.trees.BooleanLiteral.apply(true))
      };
      matchEnd10(x: Strengthener.this.checker.program.trees.Expr){
        x
      }
    }
  };
  def strengthenApplications(funDefs: Set[Strengthener.this.checker.program.trees.FunDef])(implicit dbg: inox.DebugSection): Unit = {
    Strengthener.this.checker.context.reporter.debug("- Strengthening applications")(dbg);
    val api: inox.solvers.SimpleSolverAPI{val program: inox.Program{val trees: Strengthener.this.checker.program.trees.type}} = Strengthener.this.getAPI;
    val transitiveFunDefs: scala.collection.immutable.Set[Strengthener.this.checker.program.trees.FunDef] = funDefs.++(funDefs.flatMap[Strengthener.this.checker.program.symbols.trees.FunDef, scala.collection.immutable.Set[Strengthener.this.checker.program.symbols.trees.FunDef]]({
      ((from: Strengthener.this.checker.program.symbols.trees.FunDef) => Strengthener.this.checker.program.symbols.transitiveCallees(from))
    })(immutable.this.Set.canBuildFrom[Strengthener.this.checker.program.symbols.trees.FunDef]));
    val sortedFunDefs: Seq[Strengthener.this.checker.program.trees.FunDef] = transitiveFunDefs.toSeq.sorted[Strengthener.this.checker.program.trees.FunDef](Strengthener.this.checker.program.symbols.CallGraphOrderings.functionOrdering);
    sortedFunDefs.withFilter(((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).isDefined.&&(Strengthener.this.strengthenedApp.apply(fd).unary_!).&&(Strengthener.this.checker.terminates(fd).isGuaranteed))).foreach[scala.collection.mutable.Set[Strengthener.this.checker.program.trees.FunDef]](((fd: Strengthener.this.checker.program.trees.FunDef) => {
      val applications: Seq[(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])] = Strengthener.this.checker.program.symbols.collectWithPC[(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])](fd.fullBody)(({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])] with Serializable {
    def <init>(): <$anon: ((Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)) => (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path), B1 >: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x1.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
      case7(){
        if (x1.ne(null).unary_!)
          {
            case8();
            ()
          };
        <synthetic> val p2: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
        val path: Strengthener.this.checker.program.symbols.trees.Path = x1._2;
        if (p2.isInstanceOf[Strengthener.this.checker.program.trees.Application].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x3: Strengthener.this.checker.program.trees.Application = (p2.asInstanceOf[Strengthener.this.checker.program.trees.Application]: Strengthener.this.checker.program.trees.Application);
        val v: Strengthener.this.checker.program.trees.Expr = x3.callee;
        val args: Seq[Strengthener.this.checker.program.trees.Expr] = x3.args;
        if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x4: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd6(scala.Tuple3.apply[Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](path, x4, args))
      };
      case8(){
        matchEnd6(default.apply(x1))
      };
      matchEnd6(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): Boolean = {
      case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x1.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
      case7(){
        if (x1.ne(null).unary_!)
          {
            case8();
            ()
          };
        <synthetic> val p2: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
        if (p2.isInstanceOf[Strengthener.this.checker.program.trees.Application].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x3: Strengthener.this.checker.program.trees.Application = (p2.asInstanceOf[Strengthener.this.checker.program.trees.Application]: Strengthener.this.checker.program.trees.Application);
        val v: Strengthener.this.checker.program.trees.Expr = x3.callee;
        if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case8();
            ()
          };
        matchEnd6(true)
      };
      case8(){
        matchEnd6(false)
      };
      matchEnd6(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])])).distinct;
      val fdArgs: Seq[Strengthener.this.checker.program.trees.Variable] = fd.params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$4: Strengthener.this.checker.program.trees.ValDef) => x$4.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val allFormulas: Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))] = applications.withFilter(((check$ifrefutable$1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) = (check$ifrefutable$1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)), Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]](((x$5: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])) => {
        case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) = (x$5: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) @unchecked);
        case4(){
          if (x1.ne(null).unary_!)
            {
              case5();
              ()
            };
          val path: Strengthener.this.checker.program.symbols.trees.Path = x1._1;
          val v: Strengthener.this.checker.program.trees.Variable = x1._2;
          val appArgs: Seq[Strengthener.this.checker.program.trees.Expr] = x1._3;
          matchEnd3({
            val soft: Strengthener.this.checker.program.symbols.trees.Expr = path.implies(Strengthener.this.lessEquals(appArgs, fdArgs));
            val hard: Strengthener.this.checker.program.symbols.trees.Expr = path.implies(Strengthener.this.lessThan(appArgs, fdArgs));
            scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)](scala.Tuple2.apply[Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr](soft, hard))
          })
        };
        case5(){
          matchEnd3(throw new MatchError(x1))
        };
        matchEnd3(x: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))){
          x
        }
      }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]);
      val formulaMap: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,(_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }] = allFormulas.view.groupBy[Strengthener.this.checker.program.trees.Variable](((x$6: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))) => x$6._1)).mapValues[(_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }](((x$7: scala.collection.SeqView[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)),Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]]) => x$7.map[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr), scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]]](((x$8: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))) => x$8._2))(collection.this.SeqView.canBuildFrom[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)]).unzip[Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr](scala.Predef.$conforms[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)]))).toMap[Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })]);
      val constraints: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Product with Serializable with Strengthener.this.SizeConstraint] = formulaMap.withFilter(((check$ifrefutable$2: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) = (check$ifrefutable$2: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) @unchecked);
  case6(){
    if (x1.ne(null).unary_!)
      {
        case7();
        ()
      };
    <synthetic> val p2: (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] } = x1._2;
    if (p2.isInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])].unary_!)
      {
        case7();
        ()
      };
    matchEnd5(true)
  };
  case7(){
    matchEnd5(false)
  };
  matchEnd5(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint), scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Product with Serializable with Strengthener.this.SizeConstraint]](((x$9: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })) => {
        case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) = (x$9: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) @unchecked);
        case6(){
          if (x1.ne(null).unary_!)
            {
              case7();
              ()
            };
          val v: Strengthener.this.checker.program.trees.Variable = x1._1;
          <synthetic> val p2: (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] } = x1._2;
          if (p2.isInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])].unary_!)
            {
              case7();
              ()
            };
          <synthetic> val x3: (Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) = (p2.asInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])]: (Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr]));
          val weakFormulas: Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr] = x3._1;
          val strongFormulas: Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr] = x3._2;
          matchEnd5(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[Product with Serializable with Strengthener.this.SizeConstraint](if (api.solveVALID(Strengthener.this.checker.program.trees.andJoin(weakFormulas.toSeq)).contains[Boolean](true))
            if (api.solveVALID(Strengthener.this.checker.program.trees.andJoin(strongFormulas.toSeq)).contains[Boolean](true))
              Strengthener.this.StrongDecreasing
            else
              Strengthener.this.WeakDecreasing
          else
            Strengthener.this.NoConstraint))
        };
        case7(){
          matchEnd5(throw new MatchError(x1))
        };
        matchEnd5(x: (Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint)){
          x
        }
      }))(immutable.this.Map.canBuildFrom[Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint]);
      val fdHOArgs: scala.collection.immutable.Set[Strengthener.this.checker.program.trees.Variable] = fdArgs.filter(((x$10: Strengthener.this.checker.program.trees.Variable) => x$10.tpe.isInstanceOf[Strengthener.this.checker.program.trees.FunctionType])).toSet[Strengthener.this.checker.program.trees.Variable];
      val invocations: Seq[(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])] = Strengthener.this.checker.program.symbols.collectWithPC[(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])](fd.fullBody)(({
        @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])] with Serializable {
          def <init>(): <$anon: ((Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)) => (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])> = {
            $anonfun.super.<init>();
            ()
          };
          final override def applyOrElse[A1 <: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path), B1 >: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])](x2: A1, default: A1 => B1): B1 = {
            case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x2.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
            case7(){
              if (x1.ne(null).unary_!)
                {
                  case8();
                  ()
                };
              val fi: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
              val path: Strengthener.this.checker.program.symbols.trees.Path = x1._2;
              if (fi.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
                {
                  case8();
                  ()
                };
              <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (fi.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
              val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
              if (fdHOArgs.intersect(args.collect[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable] with Serializable {
    def <init>(): <$anon: Strengthener.this.checker.program.trees.Expr => Strengthener.this.checker.program.trees.Variable> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: Strengthener.this.checker.program.trees.Expr, B1 >: Strengthener.this.checker.program.trees.Variable](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd4(x2)
      };
      case6(){
        matchEnd4(default.apply(x1))
      };
      matchEnd4(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: Strengthener.this.checker.program.trees.Expr): Boolean = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        matchEnd4(true)
      };
      case6(){
        matchEnd4(false)
      };
      matchEnd4(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable]))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]).toSet[Strengthener.this.checker.program.trees.Variable]).nonEmpty.unary_!)
                {
                  case8();
                  ()
                };
              matchEnd6(scala.Tuple3.apply[Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]](path, args, args.zip[Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef, Seq[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]](x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).fd.params)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]).collect[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)), Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]](({
                @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef),(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))] with Serializable {
                  def <init>(): <$anon: ((Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)) => (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))> = {
                    $anonfun.super.<init>();
                    ()
                  };
                  final override def applyOrElse[A1 <: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef), B1 >: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))](x2: A1, default: A1 => B1): B1 = {
                    case <synthetic> val x1: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) = ((x2.asInstanceOf[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) @unchecked);
                    case5(){
                      if (x1.ne(null).unary_!)
                        {
                          case6();
                          ()
                        };
                      val v: Strengthener.this.checker.program.trees.Expr = x1._1;
                      val vd: Strengthener.this.checker.program.trees.ValDef = x1._2;
                      if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
                        {
                          case6();
                          ()
                        };
                      <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
                      if (fdHOArgs.apply(x2).unary_!)
                        {
                          case6();
                          ()
                        };
                      matchEnd4(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](x2).->[(inox.ast.Identifier, inox.ast.Identifier)](scala.Tuple2.apply[inox.ast.Identifier, inox.ast.Identifier](x2.id, vd.id)))
                    };
                    case6(){
                      matchEnd4(default.apply(x2))
                    };
                    matchEnd4(x: B1){
                      x
                    }
                  };
                  final def isDefinedAt(x2: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): Boolean = {
                    case <synthetic> val x1: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) = ((x2.asInstanceOf[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) @unchecked);
                    case5(){
                      if (x1.ne(null).unary_!)
                        {
                          case6();
                          ()
                        };
                      val v: Strengthener.this.checker.program.trees.Expr = x1._1;
                      if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
                        {
                          case6();
                          ()
                        };
                      <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
                      if (fdHOArgs.apply(x2).unary_!)
                        {
                          case6();
                          ()
                        };
                      matchEnd4(true)
                    };
                    case6(){
                      matchEnd4(false)
                    };
                    matchEnd4(x: Boolean){
                      x
                    }
                  }
                };
                new $anonfun()
              }: PartialFunction[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef),(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])))
            };
            case8(){
              matchEnd6(default.apply(x2))
            };
            matchEnd6(x: B1){
              x
            }
          };
          final def isDefinedAt(x2: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): Boolean = {
            case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x2.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
            case7(){
              if (x1.ne(null).unary_!)
                {
                  case8();
                  ()
                };
              val fi: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
              if (fi.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
                {
                  case8();
                  ()
                };
              <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (fi.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
              val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
              if (fdHOArgs.intersect(args.collect[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable] with Serializable {
    def <init>(): <$anon: Strengthener.this.checker.program.trees.Expr => Strengthener.this.checker.program.trees.Variable> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: Strengthener.this.checker.program.trees.Expr, B1 >: Strengthener.this.checker.program.trees.Variable](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd4(x2)
      };
      case6(){
        matchEnd4(default.apply(x1))
      };
      matchEnd4(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: Strengthener.this.checker.program.trees.Expr): Boolean = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        matchEnd4(true)
      };
      case6(){
        matchEnd4(false)
      };
      matchEnd4(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable]))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]).toSet[Strengthener.this.checker.program.trees.Variable]).nonEmpty.unary_!)
                {
                  case8();
                  ()
                };
              matchEnd6(true)
            };
            case8(){
              matchEnd6(false)
            };
            matchEnd6(x: Boolean){
              x
            }
          }
        };
        new $anonfun()
      }: PartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])]));
      val var2invocations: Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))] = invocations.withFilter(((check$ifrefutable$3: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) = (check$ifrefutable$3: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).flatMap[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])), Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]](((x$12: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])) => {
        case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) = (x$12: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) @unchecked);
        case4(){
          if (x1.ne(null).unary_!)
            {
              case5();
              ()
            };
          val path: Strengthener.this.checker.program.symbols.trees.Path = x1._1;
          val args: Seq[Strengthener.this.checker.program.trees.Expr] = x1._2;
          val mapping: Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))] = x1._3;
          matchEnd3(mapping.withFilter(((check$ifrefutable$4: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) = (check$ifrefutable$4: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])), Seq[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]](((x$11: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))) => {
            case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) = (x$11: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) @unchecked);
            case4(){
              if (x1.ne(null).unary_!)
                {
                  case5();
                  ()
                };
              val v: Strengthener.this.checker.program.trees.Variable = x1._1;
              val p: (inox.ast.Identifier, inox.ast.Identifier) = x1._2;
              matchEnd3(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])](scala.Tuple3.apply[(inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]](p, path, args)))
            };
            case5(){
              matchEnd3(throw new MatchError(x1))
            };
            matchEnd3(x: (Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))){
              x
            }
          }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]))
        };
        case5(){
          matchEnd3(throw new MatchError(x1))
        };
        matchEnd3(x: Seq[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]){
          x
        }
      }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]);
      val invocationMap: Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = var2invocations.groupBy[Strengthener.this.checker.program.trees.Variable](((x$13: (Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))) => x$13._1)).mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$14: Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]) => x$14.map[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]), Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$15: (Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))) => x$15._2))(collection.this.Seq.canBuildFrom[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])])));
      def constraint(v: Strengthener.this.checker.program.trees.Variable, passings: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]): Strengthener.this.SizeConstraint = if (constraints.get(v).==(scala.Some.apply[Strengthener.this.NoConstraint.type](Strengthener.this.NoConstraint)))
        Strengthener.this.NoConstraint
      else
        if (passings.exists(((p: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => Strengthener.this.appConstraint.get(p._1).==(scala.Some.apply[Strengthener.this.NoConstraint.type](Strengthener.this.NoConstraint)))))
          Strengthener.this.NoConstraint
        else
          passings.foldLeft[Strengthener.this.SizeConstraint](constraints.getOrElse[Product with Serializable with Strengthener.this.SizeConstraint](v, Strengthener.this.StrongDecreasing))(((x0$1: Strengthener.this.SizeConstraint, x1$1: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => {
            case <synthetic> val x1: (Strengthener.this.SizeConstraint, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) = scala.Tuple2.apply[Strengthener.this.SizeConstraint, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])](x0$1, x1$1);
            case5(){
              if (x1.ne(null).unary_!)
                {
                  case6();
                  ()
                };
              val constraint: Strengthener.this.SizeConstraint = x1._1;
              <synthetic> val p2: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]) = x1._2;
              if (p2.ne(null).unary_!)
                {
                  case6();
                  ()
                };
              val key: (stainless.Identifier, stainless.Identifier) = p2._1;
              val path: Strengthener.this.checker.program.trees.Path = p2._2;
              val args: Seq[Strengthener.this.checker.program.trees.Expr] = p2._3;
              matchEnd4({
                <stable> <accessor> lazy val strongFormula: Strengthener.this.checker.program.trees.Expr = path.implies(Strengthener.this.lessThan(args, fdArgs));
                <stable> <accessor> lazy val weakFormula: Strengthener.this.checker.program.trees.Expr = path.implies(Strengthener.this.lessEquals(args, fdArgs));
                {
                  case <synthetic> val x1: (Strengthener.this.SizeConstraint, Option[Strengthener.this.SizeConstraint]) = scala.Tuple2.apply[Strengthener.this.SizeConstraint, Option[Strengthener.this.SizeConstraint]](constraint, Strengthener.this.appConstraint.get(key));
                  case34(){
                    if (x1.ne(null).unary_!)
                      {
                        case35();
                        ()
                      };
                    <synthetic> val p3: Option[Strengthener.this.SizeConstraint] = x1._2;
                    if (p3.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                      {
                        case35();
                        ()
                      };
                    <synthetic> val x4: Some[Strengthener.this.SizeConstraint] = (p3.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                    <synthetic> val p5: Strengthener.this.SizeConstraint = x4.value;
                    if (Strengthener.this.NoConstraint.==(p5).unary_!)
                      {
                        case35();
                        ()
                      };
                    matchEnd33(scala.sys.`package`.error("Whaaaat!?!? This shouldn\'t happen..."))
                  };
                  case35(){
                    if (x1.ne(null).unary_!)
                      {
                        case36();
                        ()
                      };
                    <synthetic> val p7: Option[Strengthener.this.SizeConstraint] = x1._2;
                    if (scala.None.==(p7).unary_!)
                      {
                        case36();
                        ()
                      };
                    matchEnd33(Strengthener.this.NoConstraint)
                  };
                  case36(){
                    if (x1.ne(null).unary_!)
                      {
                        case37();
                        ()
                      };
                    <synthetic> val p8: Strengthener.this.SizeConstraint = x1._1;
                    if (Strengthener.this.NoConstraint.==(p8).unary_!)
                      {
                        case37();
                        ()
                      };
                    matchEnd33(Strengthener.this.NoConstraint)
                  };
                  case37(){
                    if (x1.ne(null).unary_!)
                      {
                        case38();
                        ()
                      };
                    <synthetic> val p10: Strengthener.this.SizeConstraint = x1._1;
                    <synthetic> val p11: Option[Strengthener.this.SizeConstraint] = x1._2;
                    if ({
  case40(){
    if (Strengthener.this.StrongDecreasing.==(p10).unary_!)
      {
        case41();
        ()
      };
    matchEnd39(true)
  };
  case41(){
    if (Strengthener.this.WeakDecreasing.==(p10).unary_!)
      {
        case42();
        ()
      };
    matchEnd39(true)
  };
  case42(){
    matchEnd39(false)
  };
  matchEnd39(x: Boolean){
    x
  }
}.unary_!)
                      {
                        case38();
                        ()
                      };
                    if (p11.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                      {
                        case38();
                        ()
                      };
                    <synthetic> val x12: Some[Strengthener.this.SizeConstraint] = (p11.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                    <synthetic> val p13: Strengthener.this.SizeConstraint = x12.value;
                    if (Strengthener.this.StrongDecreasing.==(p13).unary_!)
                      {
                        case38();
                        ()
                      };
                    matchEnd33(if (api.solveVALID(weakFormula).contains[Boolean](true))
                      Strengthener.this.StrongDecreasing
                    else
                      Strengthener.this.NoConstraint)
                  };
                  case38(){
                    if (x1.ne(null).unary_!)
                      {
                        case43();
                        ()
                      };
                    <synthetic> val p14: Strengthener.this.SizeConstraint = x1._1;
                    <synthetic> val p15: Option[Strengthener.this.SizeConstraint] = x1._2;
                    if (Strengthener.this.StrongDecreasing.==(p14).unary_!)
                      {
                        case43();
                        ()
                      };
                    if (p15.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                      {
                        case43();
                        ()
                      };
                    <synthetic> val x16: Some[Strengthener.this.SizeConstraint] = (p15.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                    <synthetic> val p17: Strengthener.this.SizeConstraint = x16.value;
                    if (Strengthener.this.WeakDecreasing.==(p17).unary_!)
                      {
                        case43();
                        ()
                      };
                    matchEnd33(if (api.solveVALID(strongFormula).contains[Boolean](true))
                      Strengthener.this.StrongDecreasing
                    else
                      if (api.solveVALID(weakFormula).contains[Boolean](true))
                        Strengthener.this.WeakDecreasing
                      else
                        Strengthener.this.NoConstraint)
                  };
                  case43(){
                    if (x1.ne(null).unary_!)
                      {
                        case44();
                        ()
                      };
                    <synthetic> val p18: Strengthener.this.SizeConstraint = x1._1;
                    <synthetic> val p19: Option[Strengthener.this.SizeConstraint] = x1._2;
                    if (Strengthener.this.WeakDecreasing.==(p18).unary_!)
                      {
                        case44();
                        ()
                      };
                    if (p19.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                      {
                        case44();
                        ()
                      };
                    <synthetic> val x20: Some[Strengthener.this.SizeConstraint] = (p19.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                    <synthetic> val p21: Strengthener.this.SizeConstraint = x20.value;
                    if (Strengthener.this.WeakDecreasing.==(p21).unary_!)
                      {
                        case44();
                        ()
                      };
                    matchEnd33(if (api.solveVALID(weakFormula).contains[Boolean](true))
                      Strengthener.this.WeakDecreasing
                    else
                      Strengthener.this.NoConstraint)
                  };
                  case44(){
                    matchEnd33(throw new MatchError(x1))
                  };
                  matchEnd33(x: Strengthener.this.SizeConstraint){
                    x
                  }
                }
              })
            };
            case6(){
              matchEnd4(throw new MatchError(x1))
            };
            matchEnd4(x: Strengthener.this.SizeConstraint){
              x
            }
          }));
      val outers: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = invocationMap.mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$16: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]) => x$16.filter(((x$17: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => x$17._1._1.!=(fd)))));
      fdHOArgs.foreach[Unit](((v: Strengthener.this.checker.program.trees.Variable) => Strengthener.this.appConstraint.update(scala.Predef.ArrowAssoc[inox.ast.Identifier](fd.id).->[inox.ast.Identifier](v.id), constraint(v, outers.getOrElse[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](v, scala.collection.Seq.empty[Nothing])))));
      val selfs: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = invocationMap.mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$18: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]) => x$18.filter(((x$19: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => x$19._1._1.==(fd)))));
      fdHOArgs.foreach[Unit](((v: Strengthener.this.checker.program.trees.Variable) => Strengthener.this.appConstraint.update(scala.Predef.ArrowAssoc[inox.ast.Identifier](fd.id).->[inox.ast.Identifier](v.id), constraint(v, selfs.getOrElse[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](v, scala.collection.Seq.empty[Nothing])))));
      Strengthener.this.strengthenedApp.+=(fd)
    }))
  };
  object refinementCache extends scala.AnyRef {
    def <init>(): Strengthener.this.refinementCache.type = {
      refinementCache.super.<init>();
      ()
    };
    private[this] val cache: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = scala.collection.mutable.Map.empty[(stainless.Identifier, stainless.Identifier), Seq[Strengthener.this.checker.program.trees.Type]];
    <stable> <accessor> private def cache: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = refinementCache.this.cache;
    def add(p: ((stainless.Identifier, stainless.Identifier), Seq[Strengthener.this.checker.program.trees.Type])): Unit = {
      val oldTypes: Seq[Strengthener.this.checker.program.trees.Type] = refinementCache.this.cache.getOrElse[Seq[Strengthener.this.checker.program.trees.Type]](p._1, scala.collection.Seq.apply[Nothing]());
      refinementCache.this.cache.update(p._1, oldTypes.++[Strengthener.this.checker.program.trees.Type, Seq[Strengthener.this.checker.program.trees.Type]](p._2)(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Type]))
    };
    def get: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = refinementCache.this.cache
  };
  <stable> <accessor> val cfa: stainless.termination.CICFA{val program: stainless.termination.TerminationChecker.<refinement>.type};
  def annotateStrength(funDef: Strengthener.this.checker.program.trees.FunDef): Strengthener.this.checker.program.trees.FunDef = {
    val analysis: Strengthener.this.cfa.Analysis = Strengthener.this.cfa.analyze(funDef.id);
    object transformer extends AnyRef with stainless.transformers.TransformerWithPC with stainless.transformers.DefinitionTransformer {
      def <init>(): transformer.type = {
        transformer.super.<init>();
        ()
      };
      private[this] val s: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
      <stable> <accessor> def s: Strengthener.this.checker.program.trees.type = transformer.this.s;
      private[this] val t: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
      <stable> <accessor> def t: Strengthener.this.checker.program.trees.type = transformer.this.t;
      private[this] val symbols: Strengthener.this.checker.program.symbols.type = Strengthener.this.checker.program.symbols;
      <stable> <accessor> def symbols: Strengthener.this.checker.program.symbols.type = transformer.this.symbols;
      type Env = Strengthener.this.checker.program.trees.Path;
      private[this] val initEnv: Strengthener.this.checker.program.trees.Path = Strengthener.this.checker.program.trees.Path.empty;
      <stable> <accessor> def initEnv: Strengthener.this.checker.program.trees.Path = transformer.this.initEnv;
      private[this] val pp: Strengthener.this.checker.program.trees.Path.type = Strengthener.this.checker.program.trees.Path;
      <stable> <accessor> def pp: Strengthener.this.checker.program.trees.Path.type = transformer.this.pp;
      private[this] var inLambda: Boolean = false;
      <accessor> def inLambda: Boolean = transformer.this.inLambda;
      <accessor> def inLambda_=(x$1: Boolean): Unit = transformer.this.inLambda = x$1;
      override def transform(e: Strengthener.this.checker.program.trees.Expr, path: Strengthener.this.checker.program.trees.Path): Strengthener.this.checker.program.trees.Expr = {
        case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = e;
        case7(){
          if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
            {
              case8();
              ()
            };
          <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
          val fid: inox.ast.Identifier = x2.id;
          val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
          matchEnd6({
            <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
              case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
              case6(){
                if (x1.ne(null).unary_!)
                  {
                    case7();
                    ()
                  };
                val id: inox.ast.Identifier = x1._1;
                val l: Strengthener.this.checker.program.trees.Expr = x1._2;
                if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
                  {
                    case7();
                    ()
                  };
                <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
                val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
                val body: Strengthener.this.checker.program.trees.Expr = x2.body;
                if (analysis.isApplied(x2).unary_!)
                  {
                    case7();
                    ()
                  };
                matchEnd5({
                  val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
                  val old: Boolean = transformer.this.inLambda;
                  transformer.this.inLambda_=(true);
                  val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
                    val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
                    val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
                    val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
                    {
                      <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
                      <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
                      <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
                      arg.copy(x$2, x$1, x$3)
                    }
                  }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                  val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
                  val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                  val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                  val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
                  val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
                  val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                  val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
                  val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
                  Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
                  transformer.this.inLambda_=(old);
                  Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
                })
              };
              case7(){
                if (x1.ne(null).unary_!)
                  {
                    case8();
                    ()
                  };
                val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
                matchEnd5(transformer.this.transform(arg, path))
              };
              case8(){
                matchEnd5(throw new MatchError(x1))
              };
              matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
                x
              }
            }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
            <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
            <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
            x2.copy(x$5, x$6, x$4)
          })
        };
        case8(){
          if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
            {
              case9();
              ()
            };
          <synthetic> val x4: Strengthener.this.checker.program.trees.Lambda = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
          matchEnd6(if (analysis.isApplied(x4))
            {
              val old: Boolean = transformer.this.inLambda;
              transformer.this.inLambda_=(true);
              val res: stainless.termination.Strengthener.transformer.t.Expr = transformer.super.transform(e, path);
              transformer.this.inLambda_=(old);
              res
            }
          else
            x4)
        };
        case9(){
          matchEnd6(transformer.super.transform(e, path))
        };
        matchEnd6(x: Strengthener.this.checker.program.trees.Expr){
          x
        }
      }
    };
    transformer.transform(funDef)
  }
}
TRANSFORM: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
TREE: abstract trait Strengthener extends scala.AnyRef { self: stainless.termination.Strengthener with stainless.termination.OrderingRelation => 
  def /*Strengthener*/$init$(): Unit = {
    ()
  };
  <stable> <accessor> val checker: stainless.termination.ProcessingPipeline;
  import Strengthener.this.checker._;
  import Strengthener.this.checker.context._;
  import Strengthener.this.checker.program._;
  import Strengthener.this.checker.program.trees._;
  import Strengthener.this.checker.program.symbols._;
  import Strengthener.this.checker.program.symbols.CallGraphOrderings._;
  <stable> <accessor> private val strengthenedPost: scala.collection.mutable.Map[stainless.Identifier,Option[Strengthener.this.checker.program.trees.Lambda]] = scala.collection.mutable.Map.empty[stainless.Identifier, Option[Strengthener.this.checker.program.trees.Lambda]];
  <stable> <accessor> lazy private val ignorePosts: Boolean = Strengthener.this.checker.context.options.findOptionOrDefault[Boolean](optIgnorePosts)((ClassTag.Boolean: scala.reflect.ClassTag[Boolean]));
  private object postStrengthener extends AnyRef with Strengthener.this.checker.program.trees.IdentitySymbolTransformer {
    def <init>(): Strengthener.this.postStrengthener.type = {
      postStrengthener.super.<init>();
      ()
    };
    override def transform(syms: Strengthener.this.checker.program.trees.Symbols): Strengthener.this.checker.program.trees.Symbols = syms.withFunctions(syms.functions.toSeq.map[Strengthener.this.checker.program.trees.FunDef, Seq[Strengthener.this.checker.program.trees.FunDef]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.FunDef)) => {
      case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.FunDef) = x0$1;
      case4(){
        if (x1.ne(null).unary_!)
          {
            case5();
            ()
          };
        val id: inox.ast.Identifier = x1._1;
        val fd: Strengthener.this.checker.program.trees.FunDef = x1._2;
        matchEnd3({
          case <synthetic> val x1: Option[Option[Strengthener.this.checker.program.trees.Lambda]] = Strengthener.this.strengthenedPost.get(id);
          case7(){
            if (x1.isInstanceOf[Some[Option[Strengthener.this.checker.program.trees.Lambda]]].unary_!)
              {
                case8();
                ()
              };
            <synthetic> val x2: Some[Option[Strengthener.this.checker.program.trees.Lambda]] = (x1.asInstanceOf[Some[Option[Strengthener.this.checker.program.trees.Lambda]]]: Some[Option[Strengthener.this.checker.program.trees.Lambda]]);
            val post: Option[Strengthener.this.checker.program.trees.Lambda] = x2.value;
            if (post.isInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]].unary_!)
              {
                case8();
                ()
              };
            <synthetic> val x3: Some[Strengthener.this.checker.program.trees.Lambda] = (post.asInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]]: Some[Strengthener.this.checker.program.trees.Lambda]);
            matchEnd6({
              <artifact> val x$1: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.withPostcondition(fd.fullBody, x3);
              <artifact> val x$2: inox.ast.Identifier = fd.copy$default$1;
              <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.TypeParameterDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$2;
              <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.ValDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$3;
              <artifact> val x$5: Strengthener.this.checker.program.trees.Type = fd.copy$default$4;
              <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$6;
              fd.copy(x$2, x$3, x$4, x$5, x$1, x$6)
            })
          };
          case8(){
            matchEnd6(fd)
          };
          matchEnd6(x: Strengthener.this.checker.program.trees.FunDef){
            x
          }
        })
      };
      case5(){
        matchEnd3(throw new MatchError(x1))
      };
      matchEnd3(x: Strengthener.this.checker.program.trees.FunDef){
        x
      }
    }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.FunDef]))
  };
  Strengthener.this.registerTransformer(Strengthener.this.postStrengthener);
  def strengthenPostconditions(funDefs: Set[Strengthener.this.checker.program.trees.FunDef])(implicit dbg: inox.DebugSection): Unit = {
    Strengthener.this.checker.context.reporter.debug("- Strengthening postconditions")(dbg);
    val callees: Set[Strengthener.this.checker.program.trees.FunDef] = funDefs.flatMap[Strengthener.this.checker.program.symbols.trees.FunDef, Set[Strengthener.this.checker.program.trees.FunDef]](((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.symbols.transitiveCallees(fd)))(immutable.this.Set.canBuildFrom[Strengthener.this.checker.program.trees.FunDef]);
    val sortedCallees: Seq[Strengthener.this.checker.program.trees.FunDef] = callees.toSeq.sorted[Strengthener.this.checker.program.trees.FunDef](Strengthener.this.checker.program.symbols.CallGraphOrderings.functionOrdering);
    sortedCallees.withFilter(((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).isDefined.&&(Strengthener.this.strengthenedPost.isDefinedAt(fd.id).unary_!).&&(Strengthener.this.checker.terminates(fd).isGuaranteed))).foreach[Unit](((fd: Strengthener.this.checker.program.trees.FunDef) => {
      Strengthener.this.strengthenedPost.update(fd.id, scala.None);
      def strengthen(cmp: (Seq[Strengthener.this.checker.program.trees.Expr], Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.checker.program.trees.Expr): Boolean = {
        val postcondition: Strengthener.this.checker.program.trees.Lambda = {
          val res: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("res", fd.returnType, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
          val post: Strengthener.this.checker.program.symbols.trees.Expr = {
            case <synthetic> val x1: Option[Strengthener.this.checker.program.trees.Lambda] = Strengthener.this.checker.program.trees.StainlessFunDef(fd).postcondition(Strengthener.this.checker.program.symbols.implicitSymbols);
            case5(){
              if (x1.isInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]].unary_!)
                {
                  case6();
                  ()
                };
              <synthetic> val x2: Some[Strengthener.this.checker.program.trees.Lambda] = (x1.asInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]]: Some[Strengthener.this.checker.program.trees.Lambda]);
              val post: Strengthener.this.checker.program.trees.Lambda = x2.value;
              if (Strengthener.this.ignorePosts)
                {
                  case6();
                  ()
                };
              matchEnd4(Strengthener.this.checker.program.symbols.application(post, scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Variable](res.toVariable)))
            };
            case6(){
              matchEnd4(Strengthener.this.checker.program.trees.BooleanLiteral.apply(true))
            };
            matchEnd4(x: Strengthener.this.checker.program.symbols.trees.Expr){
              x
            }
          };
          val sizePost: Strengthener.this.checker.program.trees.Expr = cmp.apply(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Variable](res.toVariable), fd.params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$1: Strengthener.this.checker.program.trees.ValDef) => x$1.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
          Strengthener.this.checker.program.trees.Lambda.apply(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.ValDef](res), Strengthener.this.checker.program.trees.and(post, sizePost))
        };
        val formula: Strengthener.this.checker.program.trees.Expr = Strengthener.this.checker.program.trees.implies(Strengthener.this.checker.program.trees.StainlessFunDef(fd).precOrTrue(Strengthener.this.checker.program.symbols.implicitSymbols), Strengthener.this.checker.program.symbols.application(postcondition, scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Expr](Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).get)));
        val strengthener: Strengthener.this.checker.program.trees.IdentitySymbolTransformer = {
          final class $anon extends AnyRef with Strengthener.this.checker.program.trees.IdentitySymbolTransformer {
            def <init>(): <$anon: Strengthener.this.checker.program.trees.IdentitySymbolTransformer> = {
              $anon.super.<init>();
              ()
            };
            override def transform(syms: Strengthener.this.checker.program.trees.Symbols): Strengthener.this.checker.program.trees.Symbols = $anon.super.transform(syms).withFunctions(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.FunDef]({
              <artifact> val x$1: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.withPostcondition(fd.fullBody, scala.Some.apply[Strengthener.this.checker.program.trees.Lambda](postcondition));
              <artifact> val x$2: inox.ast.Identifier = fd.copy$default$1;
              <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.TypeParameterDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$2;
              <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.ValDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$3;
              <artifact> val x$5: Strengthener.this.checker.program.trees.Type = fd.copy$default$4;
              <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$6;
              fd.copy(x$2, x$3, x$4, x$5, x$1, x$6)
            }))
          };
          new $anon()
        };
        val api: inox.solvers.SimpleSolverAPI{val program: inox.Program{val trees: Strengthener.this.checker.program.trees.type}} = Strengthener.this.getAPI(strengthener);
        if (Strengthener.this.checker.program.trees.exprOps.variablesOf(formula).nonEmpty.&&(api.solveVALID(formula).contains[Boolean](true)))
          {
            Strengthener.this.strengthenedPost.update(fd.id, scala.Some.apply[Strengthener.this.checker.program.trees.Lambda](postcondition));
            true
          }
        else
          false
      };
      val weakConstraintHolds: Boolean = strengthen({
        ((args1: Seq[Strengthener.this.checker.program.trees.Expr], args2: Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.lessEquals(args1, args2))
      });
      val strongConstraintHolds: Boolean = if (weakConstraintHolds)
        strengthen({
          ((args1: Seq[Strengthener.this.checker.program.trees.Expr], args2: Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.lessThan(args1, args2))
        })
      else
        false;
      ()
    }))
  };
  sealed abstract class SizeConstraint extends scala.AnyRef {
    def <init>(): Strengthener.this.SizeConstraint = {
      SizeConstraint.super.<init>();
      ()
    }
  };
  case object StrongDecreasing extends Strengthener.this.SizeConstraint with Product with Serializable {
    def <init>(): Strengthener.this.StrongDecreasing.type = {
      StrongDecreasing.super.<init>();
      ()
    };
    override <synthetic> def productPrefix: String = "StrongDecreasing";
    <synthetic> def productArity: Int = 0;
    <synthetic> def productElement(x$1: Int): Any = {
      case <synthetic> val x1: Int = x$1;
      case4(){
        matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
      };
      matchEnd3(x: Any){
        x
      }
    };
    override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](StrongDecreasing.this);
    <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.StrongDecreasing.type]();
    override <synthetic> def hashCode(): Int = -559514638;
    override <synthetic> def toString(): String = "StrongDecreasing"
  };
  case object WeakDecreasing extends Strengthener.this.SizeConstraint with Product with Serializable {
    def <init>(): Strengthener.this.WeakDecreasing.type = {
      WeakDecreasing.super.<init>();
      ()
    };
    override <synthetic> def productPrefix: String = "WeakDecreasing";
    <synthetic> def productArity: Int = 0;
    <synthetic> def productElement(x$1: Int): Any = {
      case <synthetic> val x1: Int = x$1;
      case4(){
        matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
      };
      matchEnd3(x: Any){
        x
      }
    };
    override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](WeakDecreasing.this);
    <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.WeakDecreasing.type]();
    override <synthetic> def hashCode(): Int = -788904045;
    override <synthetic> def toString(): String = "WeakDecreasing"
  };
  case object NoConstraint extends Strengthener.this.SizeConstraint with Product with Serializable {
    def <init>(): Strengthener.this.NoConstraint.type = {
      NoConstraint.super.<init>();
      ()
    };
    override <synthetic> def productPrefix: String = "NoConstraint";
    <synthetic> def productArity: Int = 0;
    <synthetic> def productElement(x$1: Int): Any = {
      case <synthetic> val x1: Int = x$1;
      case4(){
        matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
      };
      matchEnd3(x: Any){
        x
      }
    };
    override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](NoConstraint.this);
    <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.NoConstraint.type]();
    override <synthetic> def hashCode(): Int = 1388500638;
    override <synthetic> def toString(): String = "NoConstraint"
  };
  <stable> <accessor> private val strengthenedApp: scala.collection.mutable.Set[Strengthener.this.checker.program.trees.FunDef] = scala.collection.mutable.Set.empty[Strengthener.this.checker.program.trees.FunDef];
  protected def strengthened(fd: Strengthener.this.checker.program.trees.FunDef): Boolean = Strengthener.this.strengthenedApp.apply(fd);
  <stable> <accessor> private val appConstraint: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Strengthener.this.SizeConstraint] = scala.collection.mutable.Map.empty[(stainless.Identifier, stainless.Identifier), Strengthener.this.SizeConstraint];
  def applicationConstraint(fid: stainless.Identifier, id: stainless.Identifier, largs: Seq[Strengthener.this.checker.program.trees.ValDef], args: Seq[Strengthener.this.checker.program.trees.Expr]): Strengthener.this.checker.program.trees.Expr = {
    <synthetic> var rc9: Boolean = false;
    <synthetic> var x2: Some[Strengthener.this.SizeConstraint] = null.asInstanceOf[Some[Strengthener.this.SizeConstraint]];
    {
      case <synthetic> val x1: Option[Strengthener.this.SizeConstraint] = Strengthener.this.appConstraint.get(scala.Predef.ArrowAssoc[stainless.Identifier](fid).->[stainless.Identifier](id));
      case11(){
        if (x1.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
          {
            case12();
            ()
          };
        rc9 = true;
        x2 = (x1.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
        {
          <synthetic> val p3: Strengthener.this.SizeConstraint = x2.value;
          if (Strengthener.this.StrongDecreasing.==(p3).unary_!)
            {
              case12();
              ()
            };
          matchEnd10(Strengthener.this.lessThan(largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$2: Strengthener.this.checker.program.trees.ValDef) => x$2.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]), args))
        }
      };
      case12(){
        if (rc9.unary_!)
          {
            case13();
            ()
          };
        <synthetic> val p5: Strengthener.this.SizeConstraint = x2.value;
        if (Strengthener.this.WeakDecreasing.==(p5).unary_!)
          {
            case13();
            ()
          };
        matchEnd10(Strengthener.this.lessEquals(largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$3: Strengthener.this.checker.program.trees.ValDef) => x$3.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]), args))
      };
      case13(){
        matchEnd10(Strengthener.this.checker.program.trees.BooleanLiteral.apply(true))
      };
      matchEnd10(x: Strengthener.this.checker.program.trees.Expr){
        x
      }
    }
  };
  def strengthenApplications(funDefs: Set[Strengthener.this.checker.program.trees.FunDef])(implicit dbg: inox.DebugSection): Unit = {
    Strengthener.this.checker.context.reporter.debug("- Strengthening applications")(dbg);
    val api: inox.solvers.SimpleSolverAPI{val program: inox.Program{val trees: Strengthener.this.checker.program.trees.type}} = Strengthener.this.getAPI;
    val transitiveFunDefs: scala.collection.immutable.Set[Strengthener.this.checker.program.trees.FunDef] = funDefs.++(funDefs.flatMap[Strengthener.this.checker.program.symbols.trees.FunDef, scala.collection.immutable.Set[Strengthener.this.checker.program.symbols.trees.FunDef]]({
      ((from: Strengthener.this.checker.program.symbols.trees.FunDef) => Strengthener.this.checker.program.symbols.transitiveCallees(from))
    })(immutable.this.Set.canBuildFrom[Strengthener.this.checker.program.symbols.trees.FunDef]));
    val sortedFunDefs: Seq[Strengthener.this.checker.program.trees.FunDef] = transitiveFunDefs.toSeq.sorted[Strengthener.this.checker.program.trees.FunDef](Strengthener.this.checker.program.symbols.CallGraphOrderings.functionOrdering);
    sortedFunDefs.withFilter(((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).isDefined.&&(Strengthener.this.strengthenedApp.apply(fd).unary_!).&&(Strengthener.this.checker.terminates(fd).isGuaranteed))).foreach[scala.collection.mutable.Set[Strengthener.this.checker.program.trees.FunDef]](((fd: Strengthener.this.checker.program.trees.FunDef) => {
      val applications: Seq[(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])] = Strengthener.this.checker.program.symbols.collectWithPC[(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])](fd.fullBody)(({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])] with Serializable {
    def <init>(): <$anon: ((Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)) => (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path), B1 >: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x1.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
      case7(){
        if (x1.ne(null).unary_!)
          {
            case8();
            ()
          };
        <synthetic> val p2: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
        val path: Strengthener.this.checker.program.symbols.trees.Path = x1._2;
        if (p2.isInstanceOf[Strengthener.this.checker.program.trees.Application].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x3: Strengthener.this.checker.program.trees.Application = (p2.asInstanceOf[Strengthener.this.checker.program.trees.Application]: Strengthener.this.checker.program.trees.Application);
        val v: Strengthener.this.checker.program.trees.Expr = x3.callee;
        val args: Seq[Strengthener.this.checker.program.trees.Expr] = x3.args;
        if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x4: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd6(scala.Tuple3.apply[Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](path, x4, args))
      };
      case8(){
        matchEnd6(default.apply(x1))
      };
      matchEnd6(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): Boolean = {
      case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x1.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
      case7(){
        if (x1.ne(null).unary_!)
          {
            case8();
            ()
          };
        <synthetic> val p2: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
        if (p2.isInstanceOf[Strengthener.this.checker.program.trees.Application].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x3: Strengthener.this.checker.program.trees.Application = (p2.asInstanceOf[Strengthener.this.checker.program.trees.Application]: Strengthener.this.checker.program.trees.Application);
        val v: Strengthener.this.checker.program.trees.Expr = x3.callee;
        if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case8();
            ()
          };
        matchEnd6(true)
      };
      case8(){
        matchEnd6(false)
      };
      matchEnd6(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])])).distinct;
      val fdArgs: Seq[Strengthener.this.checker.program.trees.Variable] = fd.params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$4: Strengthener.this.checker.program.trees.ValDef) => x$4.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
      val allFormulas: Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))] = applications.withFilter(((check$ifrefutable$1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) = (check$ifrefutable$1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)), Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]](((x$5: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])) => {
        case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) = (x$5: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) @unchecked);
        case4(){
          if (x1.ne(null).unary_!)
            {
              case5();
              ()
            };
          val path: Strengthener.this.checker.program.symbols.trees.Path = x1._1;
          val v: Strengthener.this.checker.program.trees.Variable = x1._2;
          val appArgs: Seq[Strengthener.this.checker.program.trees.Expr] = x1._3;
          matchEnd3({
            val soft: Strengthener.this.checker.program.symbols.trees.Expr = path.implies(Strengthener.this.lessEquals(appArgs, fdArgs));
            val hard: Strengthener.this.checker.program.symbols.trees.Expr = path.implies(Strengthener.this.lessThan(appArgs, fdArgs));
            scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)](scala.Tuple2.apply[Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr](soft, hard))
          })
        };
        case5(){
          matchEnd3(throw new MatchError(x1))
        };
        matchEnd3(x: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))){
          x
        }
      }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]);
      val formulaMap: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,(_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }] = allFormulas.view.groupBy[Strengthener.this.checker.program.trees.Variable](((x$6: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))) => x$6._1)).mapValues[(_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }](((x$7: scala.collection.SeqView[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)),Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]]) => x$7.map[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr), scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]]](((x$8: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))) => x$8._2))(collection.this.SeqView.canBuildFrom[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)]).unzip[Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr](scala.Predef.$conforms[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)]))).toMap[Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })]);
      val constraints: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Product with Serializable with Strengthener.this.SizeConstraint] = formulaMap.withFilter(((check$ifrefutable$2: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) = (check$ifrefutable$2: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) @unchecked);
  case6(){
    if (x1.ne(null).unary_!)
      {
        case7();
        ()
      };
    <synthetic> val p2: (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] } = x1._2;
    if (p2.isInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])].unary_!)
      {
        case7();
        ()
      };
    matchEnd5(true)
  };
  case7(){
    matchEnd5(false)
  };
  matchEnd5(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint), scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Product with Serializable with Strengthener.this.SizeConstraint]](((x$9: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })) => {
        case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) = (x$9: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) @unchecked);
        case6(){
          if (x1.ne(null).unary_!)
            {
              case7();
              ()
            };
          val v: Strengthener.this.checker.program.trees.Variable = x1._1;
          <synthetic> val p2: (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] } = x1._2;
          if (p2.isInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])].unary_!)
            {
              case7();
              ()
            };
          <synthetic> val x3: (Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) = (p2.asInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])]: (Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr]));
          val weakFormulas: Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr] = x3._1;
          val strongFormulas: Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr] = x3._2;
          matchEnd5(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[Product with Serializable with Strengthener.this.SizeConstraint](if (api.solveVALID(Strengthener.this.checker.program.trees.andJoin(weakFormulas.toSeq)).contains[Boolean](true))
            if (api.solveVALID(Strengthener.this.checker.program.trees.andJoin(strongFormulas.toSeq)).contains[Boolean](true))
              Strengthener.this.StrongDecreasing
            else
              Strengthener.this.WeakDecreasing
          else
            Strengthener.this.NoConstraint))
        };
        case7(){
          matchEnd5(throw new MatchError(x1))
        };
        matchEnd5(x: (Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint)){
          x
        }
      }))(immutable.this.Map.canBuildFrom[Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint]);
      val fdHOArgs: scala.collection.immutable.Set[Strengthener.this.checker.program.trees.Variable] = fdArgs.filter(((x$10: Strengthener.this.checker.program.trees.Variable) => x$10.tpe.isInstanceOf[Strengthener.this.checker.program.trees.FunctionType])).toSet[Strengthener.this.checker.program.trees.Variable];
      val invocations: Seq[(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])] = Strengthener.this.checker.program.symbols.collectWithPC[(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])](fd.fullBody)(({
        @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])] with Serializable {
          def <init>(): <$anon: ((Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)) => (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])> = {
            $anonfun.super.<init>();
            ()
          };
          final override def applyOrElse[A1 <: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path), B1 >: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])](x2: A1, default: A1 => B1): B1 = {
            case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x2.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
            case7(){
              if (x1.ne(null).unary_!)
                {
                  case8();
                  ()
                };
              val fi: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
              val path: Strengthener.this.checker.program.symbols.trees.Path = x1._2;
              if (fi.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
                {
                  case8();
                  ()
                };
              <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (fi.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
              val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
              if (fdHOArgs.intersect(args.collect[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable] with Serializable {
    def <init>(): <$anon: Strengthener.this.checker.program.trees.Expr => Strengthener.this.checker.program.trees.Variable> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: Strengthener.this.checker.program.trees.Expr, B1 >: Strengthener.this.checker.program.trees.Variable](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd4(x2)
      };
      case6(){
        matchEnd4(default.apply(x1))
      };
      matchEnd4(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: Strengthener.this.checker.program.trees.Expr): Boolean = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        matchEnd4(true)
      };
      case6(){
        matchEnd4(false)
      };
      matchEnd4(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable]))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]).toSet[Strengthener.this.checker.program.trees.Variable]).nonEmpty.unary_!)
                {
                  case8();
                  ()
                };
              matchEnd6(scala.Tuple3.apply[Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]](path, args, args.zip[Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef, Seq[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]](x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).fd.params)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]).collect[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)), Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]](({
                @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef),(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))] with Serializable {
                  def <init>(): <$anon: ((Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)) => (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))> = {
                    $anonfun.super.<init>();
                    ()
                  };
                  final override def applyOrElse[A1 <: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef), B1 >: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))](x2: A1, default: A1 => B1): B1 = {
                    case <synthetic> val x1: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) = ((x2.asInstanceOf[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) @unchecked);
                    case5(){
                      if (x1.ne(null).unary_!)
                        {
                          case6();
                          ()
                        };
                      val v: Strengthener.this.checker.program.trees.Expr = x1._1;
                      val vd: Strengthener.this.checker.program.trees.ValDef = x1._2;
                      if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
                        {
                          case6();
                          ()
                        };
                      <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
                      if (fdHOArgs.apply(x2).unary_!)
                        {
                          case6();
                          ()
                        };
                      matchEnd4(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](x2).->[(inox.ast.Identifier, inox.ast.Identifier)](scala.Tuple2.apply[inox.ast.Identifier, inox.ast.Identifier](x2.id, vd.id)))
                    };
                    case6(){
                      matchEnd4(default.apply(x2))
                    };
                    matchEnd4(x: B1){
                      x
                    }
                  };
                  final def isDefinedAt(x2: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): Boolean = {
                    case <synthetic> val x1: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) = ((x2.asInstanceOf[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) @unchecked);
                    case5(){
                      if (x1.ne(null).unary_!)
                        {
                          case6();
                          ()
                        };
                      val v: Strengthener.this.checker.program.trees.Expr = x1._1;
                      if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
                        {
                          case6();
                          ()
                        };
                      <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
                      if (fdHOArgs.apply(x2).unary_!)
                        {
                          case6();
                          ()
                        };
                      matchEnd4(true)
                    };
                    case6(){
                      matchEnd4(false)
                    };
                    matchEnd4(x: Boolean){
                      x
                    }
                  }
                };
                new $anonfun()
              }: PartialFunction[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef),(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])))
            };
            case8(){
              matchEnd6(default.apply(x2))
            };
            matchEnd6(x: B1){
              x
            }
          };
          final def isDefinedAt(x2: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): Boolean = {
            case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x2.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
            case7(){
              if (x1.ne(null).unary_!)
                {
                  case8();
                  ()
                };
              val fi: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
              if (fi.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
                {
                  case8();
                  ()
                };
              <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (fi.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
              val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
              if (fdHOArgs.intersect(args.collect[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable] with Serializable {
    def <init>(): <$anon: Strengthener.this.checker.program.trees.Expr => Strengthener.this.checker.program.trees.Variable> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: Strengthener.this.checker.program.trees.Expr, B1 >: Strengthener.this.checker.program.trees.Variable](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd4(x2)
      };
      case6(){
        matchEnd4(default.apply(x1))
      };
      matchEnd4(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: Strengthener.this.checker.program.trees.Expr): Boolean = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        matchEnd4(true)
      };
      case6(){
        matchEnd4(false)
      };
      matchEnd4(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable]))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]).toSet[Strengthener.this.checker.program.trees.Variable]).nonEmpty.unary_!)
                {
                  case8();
                  ()
                };
              matchEnd6(true)
            };
            case8(){
              matchEnd6(false)
            };
            matchEnd6(x: Boolean){
              x
            }
          }
        };
        new $anonfun()
      }: PartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])]));
      val var2invocations: Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))] = invocations.withFilter(((check$ifrefutable$3: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) = (check$ifrefutable$3: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).flatMap[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])), Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]](((x$12: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])) => {
        case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) = (x$12: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) @unchecked);
        case4(){
          if (x1.ne(null).unary_!)
            {
              case5();
              ()
            };
          val path: Strengthener.this.checker.program.symbols.trees.Path = x1._1;
          val args: Seq[Strengthener.this.checker.program.trees.Expr] = x1._2;
          val mapping: Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))] = x1._3;
          matchEnd3(mapping.withFilter(((check$ifrefutable$4: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) = (check$ifrefutable$4: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])), Seq[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]](((x$11: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))) => {
            case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) = (x$11: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) @unchecked);
            case4(){
              if (x1.ne(null).unary_!)
                {
                  case5();
                  ()
                };
              val v: Strengthener.this.checker.program.trees.Variable = x1._1;
              val p: (inox.ast.Identifier, inox.ast.Identifier) = x1._2;
              matchEnd3(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])](scala.Tuple3.apply[(inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]](p, path, args)))
            };
            case5(){
              matchEnd3(throw new MatchError(x1))
            };
            matchEnd3(x: (Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))){
              x
            }
          }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]))
        };
        case5(){
          matchEnd3(throw new MatchError(x1))
        };
        matchEnd3(x: Seq[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]){
          x
        }
      }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]);
      val invocationMap: Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = var2invocations.groupBy[Strengthener.this.checker.program.trees.Variable](((x$13: (Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))) => x$13._1)).mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$14: Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]) => x$14.map[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]), Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$15: (Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))) => x$15._2))(collection.this.Seq.canBuildFrom[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])])));
      def constraint(v: Strengthener.this.checker.program.trees.Variable, passings: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]): Strengthener.this.SizeConstraint = if (constraints.get(v).==(scala.Some.apply[Strengthener.this.NoConstraint.type](Strengthener.this.NoConstraint)))
        Strengthener.this.NoConstraint
      else
        if (passings.exists(((p: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => Strengthener.this.appConstraint.get(p._1).==(scala.Some.apply[Strengthener.this.NoConstraint.type](Strengthener.this.NoConstraint)))))
          Strengthener.this.NoConstraint
        else
          passings.foldLeft[Strengthener.this.SizeConstraint](constraints.getOrElse[Product with Serializable with Strengthener.this.SizeConstraint](v, Strengthener.this.StrongDecreasing))(((x0$1: Strengthener.this.SizeConstraint, x1$1: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => {
            case <synthetic> val x1: (Strengthener.this.SizeConstraint, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) = scala.Tuple2.apply[Strengthener.this.SizeConstraint, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])](x0$1, x1$1);
            case5(){
              if (x1.ne(null).unary_!)
                {
                  case6();
                  ()
                };
              val constraint: Strengthener.this.SizeConstraint = x1._1;
              <synthetic> val p2: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]) = x1._2;
              if (p2.ne(null).unary_!)
                {
                  case6();
                  ()
                };
              val key: (stainless.Identifier, stainless.Identifier) = p2._1;
              val path: Strengthener.this.checker.program.trees.Path = p2._2;
              val args: Seq[Strengthener.this.checker.program.trees.Expr] = p2._3;
              matchEnd4({
                <stable> <accessor> lazy val strongFormula: Strengthener.this.checker.program.trees.Expr = path.implies(Strengthener.this.lessThan(args, fdArgs));
                <stable> <accessor> lazy val weakFormula: Strengthener.this.checker.program.trees.Expr = path.implies(Strengthener.this.lessEquals(args, fdArgs));
                {
                  case <synthetic> val x1: (Strengthener.this.SizeConstraint, Option[Strengthener.this.SizeConstraint]) = scala.Tuple2.apply[Strengthener.this.SizeConstraint, Option[Strengthener.this.SizeConstraint]](constraint, Strengthener.this.appConstraint.get(key));
                  case34(){
                    if (x1.ne(null).unary_!)
                      {
                        case35();
                        ()
                      };
                    <synthetic> val p3: Option[Strengthener.this.SizeConstraint] = x1._2;
                    if (p3.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                      {
                        case35();
                        ()
                      };
                    <synthetic> val x4: Some[Strengthener.this.SizeConstraint] = (p3.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                    <synthetic> val p5: Strengthener.this.SizeConstraint = x4.value;
                    if (Strengthener.this.NoConstraint.==(p5).unary_!)
                      {
                        case35();
                        ()
                      };
                    matchEnd33(scala.sys.`package`.error("Whaaaat!?!? This shouldn\'t happen..."))
                  };
                  case35(){
                    if (x1.ne(null).unary_!)
                      {
                        case36();
                        ()
                      };
                    <synthetic> val p7: Option[Strengthener.this.SizeConstraint] = x1._2;
                    if (scala.None.==(p7).unary_!)
                      {
                        case36();
                        ()
                      };
                    matchEnd33(Strengthener.this.NoConstraint)
                  };
                  case36(){
                    if (x1.ne(null).unary_!)
                      {
                        case37();
                        ()
                      };
                    <synthetic> val p8: Strengthener.this.SizeConstraint = x1._1;
                    if (Strengthener.this.NoConstraint.==(p8).unary_!)
                      {
                        case37();
                        ()
                      };
                    matchEnd33(Strengthener.this.NoConstraint)
                  };
                  case37(){
                    if (x1.ne(null).unary_!)
                      {
                        case38();
                        ()
                      };
                    <synthetic> val p10: Strengthener.this.SizeConstraint = x1._1;
                    <synthetic> val p11: Option[Strengthener.this.SizeConstraint] = x1._2;
                    if ({
  case40(){
    if (Strengthener.this.StrongDecreasing.==(p10).unary_!)
      {
        case41();
        ()
      };
    matchEnd39(true)
  };
  case41(){
    if (Strengthener.this.WeakDecreasing.==(p10).unary_!)
      {
        case42();
        ()
      };
    matchEnd39(true)
  };
  case42(){
    matchEnd39(false)
  };
  matchEnd39(x: Boolean){
    x
  }
}.unary_!)
                      {
                        case38();
                        ()
                      };
                    if (p11.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                      {
                        case38();
                        ()
                      };
                    <synthetic> val x12: Some[Strengthener.this.SizeConstraint] = (p11.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                    <synthetic> val p13: Strengthener.this.SizeConstraint = x12.value;
                    if (Strengthener.this.StrongDecreasing.==(p13).unary_!)
                      {
                        case38();
                        ()
                      };
                    matchEnd33(if (api.solveVALID(weakFormula).contains[Boolean](true))
                      Strengthener.this.StrongDecreasing
                    else
                      Strengthener.this.NoConstraint)
                  };
                  case38(){
                    if (x1.ne(null).unary_!)
                      {
                        case43();
                        ()
                      };
                    <synthetic> val p14: Strengthener.this.SizeConstraint = x1._1;
                    <synthetic> val p15: Option[Strengthener.this.SizeConstraint] = x1._2;
                    if (Strengthener.this.StrongDecreasing.==(p14).unary_!)
                      {
                        case43();
                        ()
                      };
                    if (p15.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                      {
                        case43();
                        ()
                      };
                    <synthetic> val x16: Some[Strengthener.this.SizeConstraint] = (p15.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                    <synthetic> val p17: Strengthener.this.SizeConstraint = x16.value;
                    if (Strengthener.this.WeakDecreasing.==(p17).unary_!)
                      {
                        case43();
                        ()
                      };
                    matchEnd33(if (api.solveVALID(strongFormula).contains[Boolean](true))
                      Strengthener.this.StrongDecreasing
                    else
                      if (api.solveVALID(weakFormula).contains[Boolean](true))
                        Strengthener.this.WeakDecreasing
                      else
                        Strengthener.this.NoConstraint)
                  };
                  case43(){
                    if (x1.ne(null).unary_!)
                      {
                        case44();
                        ()
                      };
                    <synthetic> val p18: Strengthener.this.SizeConstraint = x1._1;
                    <synthetic> val p19: Option[Strengthener.this.SizeConstraint] = x1._2;
                    if (Strengthener.this.WeakDecreasing.==(p18).unary_!)
                      {
                        case44();
                        ()
                      };
                    if (p19.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                      {
                        case44();
                        ()
                      };
                    <synthetic> val x20: Some[Strengthener.this.SizeConstraint] = (p19.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                    <synthetic> val p21: Strengthener.this.SizeConstraint = x20.value;
                    if (Strengthener.this.WeakDecreasing.==(p21).unary_!)
                      {
                        case44();
                        ()
                      };
                    matchEnd33(if (api.solveVALID(weakFormula).contains[Boolean](true))
                      Strengthener.this.WeakDecreasing
                    else
                      Strengthener.this.NoConstraint)
                  };
                  case44(){
                    matchEnd33(throw new MatchError(x1))
                  };
                  matchEnd33(x: Strengthener.this.SizeConstraint){
                    x
                  }
                }
              })
            };
            case6(){
              matchEnd4(throw new MatchError(x1))
            };
            matchEnd4(x: Strengthener.this.SizeConstraint){
              x
            }
          }));
      val outers: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = invocationMap.mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$16: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]) => x$16.filter(((x$17: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => x$17._1._1.!=(fd)))));
      fdHOArgs.foreach[Unit](((v: Strengthener.this.checker.program.trees.Variable) => Strengthener.this.appConstraint.update(scala.Predef.ArrowAssoc[inox.ast.Identifier](fd.id).->[inox.ast.Identifier](v.id), constraint(v, outers.getOrElse[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](v, scala.collection.Seq.empty[Nothing])))));
      val selfs: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = invocationMap.mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$18: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]) => x$18.filter(((x$19: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => x$19._1._1.==(fd)))));
      fdHOArgs.foreach[Unit](((v: Strengthener.this.checker.program.trees.Variable) => Strengthener.this.appConstraint.update(scala.Predef.ArrowAssoc[inox.ast.Identifier](fd.id).->[inox.ast.Identifier](v.id), constraint(v, selfs.getOrElse[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](v, scala.collection.Seq.empty[Nothing])))));
      Strengthener.this.strengthenedApp.+=(fd)
    }))
  };
  object refinementCache extends scala.AnyRef {
    def <init>(): Strengthener.this.refinementCache.type = {
      refinementCache.super.<init>();
      ()
    };
    private[this] val cache: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = scala.collection.mutable.Map.empty[(stainless.Identifier, stainless.Identifier), Seq[Strengthener.this.checker.program.trees.Type]];
    <stable> <accessor> private def cache: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = refinementCache.this.cache;
    def add(p: ((stainless.Identifier, stainless.Identifier), Seq[Strengthener.this.checker.program.trees.Type])): Unit = {
      val oldTypes: Seq[Strengthener.this.checker.program.trees.Type] = refinementCache.this.cache.getOrElse[Seq[Strengthener.this.checker.program.trees.Type]](p._1, scala.collection.Seq.apply[Nothing]());
      refinementCache.this.cache.update(p._1, oldTypes.++[Strengthener.this.checker.program.trees.Type, Seq[Strengthener.this.checker.program.trees.Type]](p._2)(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Type]))
    };
    def get: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = refinementCache.this.cache
  };
  <stable> <accessor> val cfa: stainless.termination.CICFA{val program: stainless.termination.TerminationChecker.<refinement>.type};
  def annotateStrength(funDef: Strengthener.this.checker.program.trees.FunDef): Strengthener.this.checker.program.trees.FunDef = {
    val analysis: Strengthener.this.cfa.Analysis = Strengthener.this.cfa.analyze(funDef.id);
    object transformer extends AnyRef with stainless.transformers.TransformerWithPC with stainless.transformers.DefinitionTransformer {
      def <init>(): transformer.type = {
        transformer.super.<init>();
        ()
      };
      private[this] val s: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
      <stable> <accessor> def s: Strengthener.this.checker.program.trees.type = transformer.this.s;
      private[this] val t: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
      <stable> <accessor> def t: Strengthener.this.checker.program.trees.type = transformer.this.t;
      private[this] val symbols: Strengthener.this.checker.program.symbols.type = Strengthener.this.checker.program.symbols;
      <stable> <accessor> def symbols: Strengthener.this.checker.program.symbols.type = transformer.this.symbols;
      type Env = Strengthener.this.checker.program.trees.Path;
      private[this] val initEnv: Strengthener.this.checker.program.trees.Path = Strengthener.this.checker.program.trees.Path.empty;
      <stable> <accessor> def initEnv: Strengthener.this.checker.program.trees.Path = transformer.this.initEnv;
      private[this] val pp: Strengthener.this.checker.program.trees.Path.type = Strengthener.this.checker.program.trees.Path;
      <stable> <accessor> def pp: Strengthener.this.checker.program.trees.Path.type = transformer.this.pp;
      private[this] var inLambda: Boolean = false;
      <accessor> def inLambda: Boolean = transformer.this.inLambda;
      <accessor> def inLambda_=(x$1: Boolean): Unit = transformer.this.inLambda = x$1;
      override def transform(e: Strengthener.this.checker.program.trees.Expr, path: Strengthener.this.checker.program.trees.Path): Strengthener.this.checker.program.trees.Expr = {
        case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = e;
        case7(){
          if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
            {
              case8();
              ()
            };
          <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
          val fid: inox.ast.Identifier = x2.id;
          val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
          matchEnd6({
            <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
              case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
              case6(){
                if (x1.ne(null).unary_!)
                  {
                    case7();
                    ()
                  };
                val id: inox.ast.Identifier = x1._1;
                val l: Strengthener.this.checker.program.trees.Expr = x1._2;
                if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
                  {
                    case7();
                    ()
                  };
                <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
                val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
                val body: Strengthener.this.checker.program.trees.Expr = x2.body;
                if (analysis.isApplied(x2).unary_!)
                  {
                    case7();
                    ()
                  };
                matchEnd5({
                  val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
                  val old: Boolean = transformer.this.inLambda;
                  transformer.this.inLambda_=(true);
                  val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
                    val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
                    val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
                    val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
                    {
                      <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
                      <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
                      <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
                      arg.copy(x$2, x$1, x$3)
                    }
                  }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                  val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
                  val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                  val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                  val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
                  val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
                  val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                  val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
                  val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
                  Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
                  transformer.this.inLambda_=(old);
                  Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
                })
              };
              case7(){
                if (x1.ne(null).unary_!)
                  {
                    case8();
                    ()
                  };
                val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
                matchEnd5(transformer.this.transform(arg, path))
              };
              case8(){
                matchEnd5(throw new MatchError(x1))
              };
              matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
                x
              }
            }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
            <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
            <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
            x2.copy(x$5, x$6, x$4)
          })
        };
        case8(){
          if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
            {
              case9();
              ()
            };
          <synthetic> val x4: Strengthener.this.checker.program.trees.Lambda = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
          matchEnd6(if (analysis.isApplied(x4))
            {
              val old: Boolean = transformer.this.inLambda;
              transformer.this.inLambda_=(true);
              val res: stainless.termination.Strengthener.transformer.t.Expr = transformer.super.transform(e, path);
              transformer.this.inLambda_=(old);
              res
            }
          else
            x4)
        };
        case9(){
          matchEnd6(transformer.super.transform(e, path))
        };
        matchEnd6(x: Strengthener.this.checker.program.trees.Expr){
          x
        }
      }
    };
    transformer.transform(funDef)
  }
}
TRANSFORM: null
TREE: package termination {
  import scala.collection.mutable.{Set=>MutableSet, Map=>MutableMap};
  import scala.language.existentials;
  object optIgnorePosts extends inox.FlagOptionDef {
    def <init>(): stainless.termination.optIgnorePosts.type = {
      optIgnorePosts.super.<init>("ignore-posts", false);
      ()
    };
    <synthetic> private def readResolve(): Object = stainless.termination.optIgnorePosts
  };
  abstract trait Strengthener extends scala.AnyRef { self: stainless.termination.Strengthener with stainless.termination.OrderingRelation => 
    def /*Strengthener*/$init$(): Unit = {
      ()
    };
    <stable> <accessor> val checker: stainless.termination.ProcessingPipeline;
    import Strengthener.this.checker._;
    import Strengthener.this.checker.context._;
    import Strengthener.this.checker.program._;
    import Strengthener.this.checker.program.trees._;
    import Strengthener.this.checker.program.symbols._;
    import Strengthener.this.checker.program.symbols.CallGraphOrderings._;
    <stable> <accessor> private val strengthenedPost: scala.collection.mutable.Map[stainless.Identifier,Option[Strengthener.this.checker.program.trees.Lambda]] = scala.collection.mutable.Map.empty[stainless.Identifier, Option[Strengthener.this.checker.program.trees.Lambda]];
    <stable> <accessor> lazy private val ignorePosts: Boolean = Strengthener.this.checker.context.options.findOptionOrDefault[Boolean](optIgnorePosts)((ClassTag.Boolean: scala.reflect.ClassTag[Boolean]));
    private object postStrengthener extends AnyRef with Strengthener.this.checker.program.trees.IdentitySymbolTransformer {
      def <init>(): Strengthener.this.postStrengthener.type = {
        postStrengthener.super.<init>();
        ()
      };
      override def transform(syms: Strengthener.this.checker.program.trees.Symbols): Strengthener.this.checker.program.trees.Symbols = syms.withFunctions(syms.functions.toSeq.map[Strengthener.this.checker.program.trees.FunDef, Seq[Strengthener.this.checker.program.trees.FunDef]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.FunDef)) => {
        case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.FunDef) = x0$1;
        case4(){
          if (x1.ne(null).unary_!)
            {
              case5();
              ()
            };
          val id: inox.ast.Identifier = x1._1;
          val fd: Strengthener.this.checker.program.trees.FunDef = x1._2;
          matchEnd3({
            case <synthetic> val x1: Option[Option[Strengthener.this.checker.program.trees.Lambda]] = Strengthener.this.strengthenedPost.get(id);
            case7(){
              if (x1.isInstanceOf[Some[Option[Strengthener.this.checker.program.trees.Lambda]]].unary_!)
                {
                  case8();
                  ()
                };
              <synthetic> val x2: Some[Option[Strengthener.this.checker.program.trees.Lambda]] = (x1.asInstanceOf[Some[Option[Strengthener.this.checker.program.trees.Lambda]]]: Some[Option[Strengthener.this.checker.program.trees.Lambda]]);
              val post: Option[Strengthener.this.checker.program.trees.Lambda] = x2.value;
              if (post.isInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]].unary_!)
                {
                  case8();
                  ()
                };
              <synthetic> val x3: Some[Strengthener.this.checker.program.trees.Lambda] = (post.asInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]]: Some[Strengthener.this.checker.program.trees.Lambda]);
              matchEnd6({
                <artifact> val x$1: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.withPostcondition(fd.fullBody, x3);
                <artifact> val x$2: inox.ast.Identifier = fd.copy$default$1;
                <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.TypeParameterDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$2;
                <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.ValDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$3;
                <artifact> val x$5: Strengthener.this.checker.program.trees.Type = fd.copy$default$4;
                <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$6;
                fd.copy(x$2, x$3, x$4, x$5, x$1, x$6)
              })
            };
            case8(){
              matchEnd6(fd)
            };
            matchEnd6(x: Strengthener.this.checker.program.trees.FunDef){
              x
            }
          })
        };
        case5(){
          matchEnd3(throw new MatchError(x1))
        };
        matchEnd3(x: Strengthener.this.checker.program.trees.FunDef){
          x
        }
      }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.FunDef]))
    };
    Strengthener.this.registerTransformer(Strengthener.this.postStrengthener);
    def strengthenPostconditions(funDefs: Set[Strengthener.this.checker.program.trees.FunDef])(implicit dbg: inox.DebugSection): Unit = {
      Strengthener.this.checker.context.reporter.debug("- Strengthening postconditions")(dbg);
      val callees: Set[Strengthener.this.checker.program.trees.FunDef] = funDefs.flatMap[Strengthener.this.checker.program.symbols.trees.FunDef, Set[Strengthener.this.checker.program.trees.FunDef]](((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.symbols.transitiveCallees(fd)))(immutable.this.Set.canBuildFrom[Strengthener.this.checker.program.trees.FunDef]);
      val sortedCallees: Seq[Strengthener.this.checker.program.trees.FunDef] = callees.toSeq.sorted[Strengthener.this.checker.program.trees.FunDef](Strengthener.this.checker.program.symbols.CallGraphOrderings.functionOrdering);
      sortedCallees.withFilter(((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).isDefined.&&(Strengthener.this.strengthenedPost.isDefinedAt(fd.id).unary_!).&&(Strengthener.this.checker.terminates(fd).isGuaranteed))).foreach[Unit](((fd: Strengthener.this.checker.program.trees.FunDef) => {
        Strengthener.this.strengthenedPost.update(fd.id, scala.None);
        def strengthen(cmp: (Seq[Strengthener.this.checker.program.trees.Expr], Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.checker.program.trees.Expr): Boolean = {
          val postcondition: Strengthener.this.checker.program.trees.Lambda = {
            val res: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("res", fd.returnType, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
            val post: Strengthener.this.checker.program.symbols.trees.Expr = {
              case <synthetic> val x1: Option[Strengthener.this.checker.program.trees.Lambda] = Strengthener.this.checker.program.trees.StainlessFunDef(fd).postcondition(Strengthener.this.checker.program.symbols.implicitSymbols);
              case5(){
                if (x1.isInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]].unary_!)
                  {
                    case6();
                    ()
                  };
                <synthetic> val x2: Some[Strengthener.this.checker.program.trees.Lambda] = (x1.asInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]]: Some[Strengthener.this.checker.program.trees.Lambda]);
                val post: Strengthener.this.checker.program.trees.Lambda = x2.value;
                if (Strengthener.this.ignorePosts)
                  {
                    case6();
                    ()
                  };
                matchEnd4(Strengthener.this.checker.program.symbols.application(post, scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Variable](res.toVariable)))
              };
              case6(){
                matchEnd4(Strengthener.this.checker.program.trees.BooleanLiteral.apply(true))
              };
              matchEnd4(x: Strengthener.this.checker.program.symbols.trees.Expr){
                x
              }
            };
            val sizePost: Strengthener.this.checker.program.trees.Expr = cmp.apply(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Variable](res.toVariable), fd.params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$1: Strengthener.this.checker.program.trees.ValDef) => x$1.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
            Strengthener.this.checker.program.trees.Lambda.apply(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.ValDef](res), Strengthener.this.checker.program.trees.and(post, sizePost))
          };
          val formula: Strengthener.this.checker.program.trees.Expr = Strengthener.this.checker.program.trees.implies(Strengthener.this.checker.program.trees.StainlessFunDef(fd).precOrTrue(Strengthener.this.checker.program.symbols.implicitSymbols), Strengthener.this.checker.program.symbols.application(postcondition, scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Expr](Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).get)));
          val strengthener: Strengthener.this.checker.program.trees.IdentitySymbolTransformer = {
            final class $anon extends AnyRef with Strengthener.this.checker.program.trees.IdentitySymbolTransformer {
              def <init>(): <$anon: Strengthener.this.checker.program.trees.IdentitySymbolTransformer> = {
                $anon.super.<init>();
                ()
              };
              override def transform(syms: Strengthener.this.checker.program.trees.Symbols): Strengthener.this.checker.program.trees.Symbols = $anon.super.transform(syms).withFunctions(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.FunDef]({
                <artifact> val x$1: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.withPostcondition(fd.fullBody, scala.Some.apply[Strengthener.this.checker.program.trees.Lambda](postcondition));
                <artifact> val x$2: inox.ast.Identifier = fd.copy$default$1;
                <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.TypeParameterDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$2;
                <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.ValDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$3;
                <artifact> val x$5: Strengthener.this.checker.program.trees.Type = fd.copy$default$4;
                <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$6;
                fd.copy(x$2, x$3, x$4, x$5, x$1, x$6)
              }))
            };
            new $anon()
          };
          val api: inox.solvers.SimpleSolverAPI{val program: inox.Program{val trees: Strengthener.this.checker.program.trees.type}} = Strengthener.this.getAPI(strengthener);
          if (Strengthener.this.checker.program.trees.exprOps.variablesOf(formula).nonEmpty.&&(api.solveVALID(formula).contains[Boolean](true)))
            {
              Strengthener.this.strengthenedPost.update(fd.id, scala.Some.apply[Strengthener.this.checker.program.trees.Lambda](postcondition));
              true
            }
          else
            false
        };
        val weakConstraintHolds: Boolean = strengthen({
          ((args1: Seq[Strengthener.this.checker.program.trees.Expr], args2: Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.lessEquals(args1, args2))
        });
        val strongConstraintHolds: Boolean = if (weakConstraintHolds)
          strengthen({
            ((args1: Seq[Strengthener.this.checker.program.trees.Expr], args2: Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.lessThan(args1, args2))
          })
        else
          false;
        ()
      }))
    };
    sealed abstract class SizeConstraint extends scala.AnyRef {
      def <init>(): Strengthener.this.SizeConstraint = {
        SizeConstraint.super.<init>();
        ()
      }
    };
    case object StrongDecreasing extends Strengthener.this.SizeConstraint with Product with Serializable {
      def <init>(): Strengthener.this.StrongDecreasing.type = {
        StrongDecreasing.super.<init>();
        ()
      };
      override <synthetic> def productPrefix: String = "StrongDecreasing";
      <synthetic> def productArity: Int = 0;
      <synthetic> def productElement(x$1: Int): Any = {
        case <synthetic> val x1: Int = x$1;
        case4(){
          matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
        };
        matchEnd3(x: Any){
          x
        }
      };
      override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](StrongDecreasing.this);
      <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.StrongDecreasing.type]();
      override <synthetic> def hashCode(): Int = -559514638;
      override <synthetic> def toString(): String = "StrongDecreasing"
    };
    case object WeakDecreasing extends Strengthener.this.SizeConstraint with Product with Serializable {
      def <init>(): Strengthener.this.WeakDecreasing.type = {
        WeakDecreasing.super.<init>();
        ()
      };
      override <synthetic> def productPrefix: String = "WeakDecreasing";
      <synthetic> def productArity: Int = 0;
      <synthetic> def productElement(x$1: Int): Any = {
        case <synthetic> val x1: Int = x$1;
        case4(){
          matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
        };
        matchEnd3(x: Any){
          x
        }
      };
      override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](WeakDecreasing.this);
      <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.WeakDecreasing.type]();
      override <synthetic> def hashCode(): Int = -788904045;
      override <synthetic> def toString(): String = "WeakDecreasing"
    };
    case object NoConstraint extends Strengthener.this.SizeConstraint with Product with Serializable {
      def <init>(): Strengthener.this.NoConstraint.type = {
        NoConstraint.super.<init>();
        ()
      };
      override <synthetic> def productPrefix: String = "NoConstraint";
      <synthetic> def productArity: Int = 0;
      <synthetic> def productElement(x$1: Int): Any = {
        case <synthetic> val x1: Int = x$1;
        case4(){
          matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
        };
        matchEnd3(x: Any){
          x
        }
      };
      override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](NoConstraint.this);
      <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.NoConstraint.type]();
      override <synthetic> def hashCode(): Int = 1388500638;
      override <synthetic> def toString(): String = "NoConstraint"
    };
    <stable> <accessor> private val strengthenedApp: scala.collection.mutable.Set[Strengthener.this.checker.program.trees.FunDef] = scala.collection.mutable.Set.empty[Strengthener.this.checker.program.trees.FunDef];
    protected def strengthened(fd: Strengthener.this.checker.program.trees.FunDef): Boolean = Strengthener.this.strengthenedApp.apply(fd);
    <stable> <accessor> private val appConstraint: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Strengthener.this.SizeConstraint] = scala.collection.mutable.Map.empty[(stainless.Identifier, stainless.Identifier), Strengthener.this.SizeConstraint];
    def applicationConstraint(fid: stainless.Identifier, id: stainless.Identifier, largs: Seq[Strengthener.this.checker.program.trees.ValDef], args: Seq[Strengthener.this.checker.program.trees.Expr]): Strengthener.this.checker.program.trees.Expr = {
      <synthetic> var rc9: Boolean = false;
      <synthetic> var x2: Some[Strengthener.this.SizeConstraint] = null.asInstanceOf[Some[Strengthener.this.SizeConstraint]];
      {
        case <synthetic> val x1: Option[Strengthener.this.SizeConstraint] = Strengthener.this.appConstraint.get(scala.Predef.ArrowAssoc[stainless.Identifier](fid).->[stainless.Identifier](id));
        case11(){
          if (x1.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
            {
              case12();
              ()
            };
          rc9 = true;
          x2 = (x1.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
          {
            <synthetic> val p3: Strengthener.this.SizeConstraint = x2.value;
            if (Strengthener.this.StrongDecreasing.==(p3).unary_!)
              {
                case12();
                ()
              };
            matchEnd10(Strengthener.this.lessThan(largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$2: Strengthener.this.checker.program.trees.ValDef) => x$2.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]), args))
          }
        };
        case12(){
          if (rc9.unary_!)
            {
              case13();
              ()
            };
          <synthetic> val p5: Strengthener.this.SizeConstraint = x2.value;
          if (Strengthener.this.WeakDecreasing.==(p5).unary_!)
            {
              case13();
              ()
            };
          matchEnd10(Strengthener.this.lessEquals(largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$3: Strengthener.this.checker.program.trees.ValDef) => x$3.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]), args))
        };
        case13(){
          matchEnd10(Strengthener.this.checker.program.trees.BooleanLiteral.apply(true))
        };
        matchEnd10(x: Strengthener.this.checker.program.trees.Expr){
          x
        }
      }
    };
    def strengthenApplications(funDefs: Set[Strengthener.this.checker.program.trees.FunDef])(implicit dbg: inox.DebugSection): Unit = {
      Strengthener.this.checker.context.reporter.debug("- Strengthening applications")(dbg);
      val api: inox.solvers.SimpleSolverAPI{val program: inox.Program{val trees: Strengthener.this.checker.program.trees.type}} = Strengthener.this.getAPI;
      val transitiveFunDefs: scala.collection.immutable.Set[Strengthener.this.checker.program.trees.FunDef] = funDefs.++(funDefs.flatMap[Strengthener.this.checker.program.symbols.trees.FunDef, scala.collection.immutable.Set[Strengthener.this.checker.program.symbols.trees.FunDef]]({
        ((from: Strengthener.this.checker.program.symbols.trees.FunDef) => Strengthener.this.checker.program.symbols.transitiveCallees(from))
      })(immutable.this.Set.canBuildFrom[Strengthener.this.checker.program.symbols.trees.FunDef]));
      val sortedFunDefs: Seq[Strengthener.this.checker.program.trees.FunDef] = transitiveFunDefs.toSeq.sorted[Strengthener.this.checker.program.trees.FunDef](Strengthener.this.checker.program.symbols.CallGraphOrderings.functionOrdering);
      sortedFunDefs.withFilter(((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).isDefined.&&(Strengthener.this.strengthenedApp.apply(fd).unary_!).&&(Strengthener.this.checker.terminates(fd).isGuaranteed))).foreach[scala.collection.mutable.Set[Strengthener.this.checker.program.trees.FunDef]](((fd: Strengthener.this.checker.program.trees.FunDef) => {
        val applications: Seq[(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])] = Strengthener.this.checker.program.symbols.collectWithPC[(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])](fd.fullBody)(({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])] with Serializable {
    def <init>(): <$anon: ((Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)) => (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path), B1 >: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x1.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
      case7(){
        if (x1.ne(null).unary_!)
          {
            case8();
            ()
          };
        <synthetic> val p2: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
        val path: Strengthener.this.checker.program.symbols.trees.Path = x1._2;
        if (p2.isInstanceOf[Strengthener.this.checker.program.trees.Application].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x3: Strengthener.this.checker.program.trees.Application = (p2.asInstanceOf[Strengthener.this.checker.program.trees.Application]: Strengthener.this.checker.program.trees.Application);
        val v: Strengthener.this.checker.program.trees.Expr = x3.callee;
        val args: Seq[Strengthener.this.checker.program.trees.Expr] = x3.args;
        if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x4: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd6(scala.Tuple3.apply[Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](path, x4, args))
      };
      case8(){
        matchEnd6(default.apply(x1))
      };
      matchEnd6(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): Boolean = {
      case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x1.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
      case7(){
        if (x1.ne(null).unary_!)
          {
            case8();
            ()
          };
        <synthetic> val p2: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
        if (p2.isInstanceOf[Strengthener.this.checker.program.trees.Application].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x3: Strengthener.this.checker.program.trees.Application = (p2.asInstanceOf[Strengthener.this.checker.program.trees.Application]: Strengthener.this.checker.program.trees.Application);
        val v: Strengthener.this.checker.program.trees.Expr = x3.callee;
        if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case8();
            ()
          };
        matchEnd6(true)
      };
      case8(){
        matchEnd6(false)
      };
      matchEnd6(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])])).distinct;
        val fdArgs: Seq[Strengthener.this.checker.program.trees.Variable] = fd.params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$4: Strengthener.this.checker.program.trees.ValDef) => x$4.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
        val allFormulas: Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))] = applications.withFilter(((check$ifrefutable$1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) = (check$ifrefutable$1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)), Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]](((x$5: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])) => {
          case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) = (x$5: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) @unchecked);
          case4(){
            if (x1.ne(null).unary_!)
              {
                case5();
                ()
              };
            val path: Strengthener.this.checker.program.symbols.trees.Path = x1._1;
            val v: Strengthener.this.checker.program.trees.Variable = x1._2;
            val appArgs: Seq[Strengthener.this.checker.program.trees.Expr] = x1._3;
            matchEnd3({
              val soft: Strengthener.this.checker.program.symbols.trees.Expr = path.implies(Strengthener.this.lessEquals(appArgs, fdArgs));
              val hard: Strengthener.this.checker.program.symbols.trees.Expr = path.implies(Strengthener.this.lessThan(appArgs, fdArgs));
              scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)](scala.Tuple2.apply[Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr](soft, hard))
            })
          };
          case5(){
            matchEnd3(throw new MatchError(x1))
          };
          matchEnd3(x: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))){
            x
          }
        }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]);
        val formulaMap: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,(_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }] = allFormulas.view.groupBy[Strengthener.this.checker.program.trees.Variable](((x$6: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))) => x$6._1)).mapValues[(_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }](((x$7: scala.collection.SeqView[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)),Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]]) => x$7.map[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr), scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]]](((x$8: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))) => x$8._2))(collection.this.SeqView.canBuildFrom[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)]).unzip[Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr](scala.Predef.$conforms[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)]))).toMap[Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })]);
        val constraints: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Product with Serializable with Strengthener.this.SizeConstraint] = formulaMap.withFilter(((check$ifrefutable$2: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) = (check$ifrefutable$2: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) @unchecked);
  case6(){
    if (x1.ne(null).unary_!)
      {
        case7();
        ()
      };
    <synthetic> val p2: (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] } = x1._2;
    if (p2.isInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])].unary_!)
      {
        case7();
        ()
      };
    matchEnd5(true)
  };
  case7(){
    matchEnd5(false)
  };
  matchEnd5(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint), scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Product with Serializable with Strengthener.this.SizeConstraint]](((x$9: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })) => {
          case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) = (x$9: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) @unchecked);
          case6(){
            if (x1.ne(null).unary_!)
              {
                case7();
                ()
              };
            val v: Strengthener.this.checker.program.trees.Variable = x1._1;
            <synthetic> val p2: (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] } = x1._2;
            if (p2.isInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])].unary_!)
              {
                case7();
                ()
              };
            <synthetic> val x3: (Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) = (p2.asInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])]: (Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr]));
            val weakFormulas: Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr] = x3._1;
            val strongFormulas: Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr] = x3._2;
            matchEnd5(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[Product with Serializable with Strengthener.this.SizeConstraint](if (api.solveVALID(Strengthener.this.checker.program.trees.andJoin(weakFormulas.toSeq)).contains[Boolean](true))
              if (api.solveVALID(Strengthener.this.checker.program.trees.andJoin(strongFormulas.toSeq)).contains[Boolean](true))
                Strengthener.this.StrongDecreasing
              else
                Strengthener.this.WeakDecreasing
            else
              Strengthener.this.NoConstraint))
          };
          case7(){
            matchEnd5(throw new MatchError(x1))
          };
          matchEnd5(x: (Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint)){
            x
          }
        }))(immutable.this.Map.canBuildFrom[Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint]);
        val fdHOArgs: scala.collection.immutable.Set[Strengthener.this.checker.program.trees.Variable] = fdArgs.filter(((x$10: Strengthener.this.checker.program.trees.Variable) => x$10.tpe.isInstanceOf[Strengthener.this.checker.program.trees.FunctionType])).toSet[Strengthener.this.checker.program.trees.Variable];
        val invocations: Seq[(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])] = Strengthener.this.checker.program.symbols.collectWithPC[(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])](fd.fullBody)(({
          @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])] with Serializable {
            def <init>(): <$anon: ((Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)) => (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])> = {
              $anonfun.super.<init>();
              ()
            };
            final override def applyOrElse[A1 <: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path), B1 >: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])](x2: A1, default: A1 => B1): B1 = {
              case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x2.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
              case7(){
                if (x1.ne(null).unary_!)
                  {
                    case8();
                    ()
                  };
                val fi: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
                val path: Strengthener.this.checker.program.symbols.trees.Path = x1._2;
                if (fi.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
                  {
                    case8();
                    ()
                  };
                <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (fi.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
                val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
                if (fdHOArgs.intersect(args.collect[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable] with Serializable {
    def <init>(): <$anon: Strengthener.this.checker.program.trees.Expr => Strengthener.this.checker.program.trees.Variable> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: Strengthener.this.checker.program.trees.Expr, B1 >: Strengthener.this.checker.program.trees.Variable](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd4(x2)
      };
      case6(){
        matchEnd4(default.apply(x1))
      };
      matchEnd4(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: Strengthener.this.checker.program.trees.Expr): Boolean = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        matchEnd4(true)
      };
      case6(){
        matchEnd4(false)
      };
      matchEnd4(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable]))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]).toSet[Strengthener.this.checker.program.trees.Variable]).nonEmpty.unary_!)
                  {
                    case8();
                    ()
                  };
                matchEnd6(scala.Tuple3.apply[Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]](path, args, args.zip[Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef, Seq[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]](x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).fd.params)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]).collect[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)), Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]](({
                  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef),(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))] with Serializable {
                    def <init>(): <$anon: ((Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)) => (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))> = {
                      $anonfun.super.<init>();
                      ()
                    };
                    final override def applyOrElse[A1 <: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef), B1 >: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))](x2: A1, default: A1 => B1): B1 = {
                      case <synthetic> val x1: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) = ((x2.asInstanceOf[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) @unchecked);
                      case5(){
                        if (x1.ne(null).unary_!)
                          {
                            case6();
                            ()
                          };
                        val v: Strengthener.this.checker.program.trees.Expr = x1._1;
                        val vd: Strengthener.this.checker.program.trees.ValDef = x1._2;
                        if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
                          {
                            case6();
                            ()
                          };
                        <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
                        if (fdHOArgs.apply(x2).unary_!)
                          {
                            case6();
                            ()
                          };
                        matchEnd4(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](x2).->[(inox.ast.Identifier, inox.ast.Identifier)](scala.Tuple2.apply[inox.ast.Identifier, inox.ast.Identifier](x2.id, vd.id)))
                      };
                      case6(){
                        matchEnd4(default.apply(x2))
                      };
                      matchEnd4(x: B1){
                        x
                      }
                    };
                    final def isDefinedAt(x2: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): Boolean = {
                      case <synthetic> val x1: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) = ((x2.asInstanceOf[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) @unchecked);
                      case5(){
                        if (x1.ne(null).unary_!)
                          {
                            case6();
                            ()
                          };
                        val v: Strengthener.this.checker.program.trees.Expr = x1._1;
                        if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
                          {
                            case6();
                            ()
                          };
                        <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
                        if (fdHOArgs.apply(x2).unary_!)
                          {
                            case6();
                            ()
                          };
                        matchEnd4(true)
                      };
                      case6(){
                        matchEnd4(false)
                      };
                      matchEnd4(x: Boolean){
                        x
                      }
                    }
                  };
                  new $anonfun()
                }: PartialFunction[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef),(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])))
              };
              case8(){
                matchEnd6(default.apply(x2))
              };
              matchEnd6(x: B1){
                x
              }
            };
            final def isDefinedAt(x2: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): Boolean = {
              case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x2.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
              case7(){
                if (x1.ne(null).unary_!)
                  {
                    case8();
                    ()
                  };
                val fi: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
                if (fi.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
                  {
                    case8();
                    ()
                  };
                <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (fi.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
                val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
                if (fdHOArgs.intersect(args.collect[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable] with Serializable {
    def <init>(): <$anon: Strengthener.this.checker.program.trees.Expr => Strengthener.this.checker.program.trees.Variable> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: Strengthener.this.checker.program.trees.Expr, B1 >: Strengthener.this.checker.program.trees.Variable](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd4(x2)
      };
      case6(){
        matchEnd4(default.apply(x1))
      };
      matchEnd4(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: Strengthener.this.checker.program.trees.Expr): Boolean = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        matchEnd4(true)
      };
      case6(){
        matchEnd4(false)
      };
      matchEnd4(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable]))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]).toSet[Strengthener.this.checker.program.trees.Variable]).nonEmpty.unary_!)
                  {
                    case8();
                    ()
                  };
                matchEnd6(true)
              };
              case8(){
                matchEnd6(false)
              };
              matchEnd6(x: Boolean){
                x
              }
            }
          };
          new $anonfun()
        }: PartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])]));
        val var2invocations: Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))] = invocations.withFilter(((check$ifrefutable$3: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) = (check$ifrefutable$3: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).flatMap[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])), Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]](((x$12: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])) => {
          case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) = (x$12: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) @unchecked);
          case4(){
            if (x1.ne(null).unary_!)
              {
                case5();
                ()
              };
            val path: Strengthener.this.checker.program.symbols.trees.Path = x1._1;
            val args: Seq[Strengthener.this.checker.program.trees.Expr] = x1._2;
            val mapping: Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))] = x1._3;
            matchEnd3(mapping.withFilter(((check$ifrefutable$4: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) = (check$ifrefutable$4: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])), Seq[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]](((x$11: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))) => {
              case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) = (x$11: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) @unchecked);
              case4(){
                if (x1.ne(null).unary_!)
                  {
                    case5();
                    ()
                  };
                val v: Strengthener.this.checker.program.trees.Variable = x1._1;
                val p: (inox.ast.Identifier, inox.ast.Identifier) = x1._2;
                matchEnd3(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])](scala.Tuple3.apply[(inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]](p, path, args)))
              };
              case5(){
                matchEnd3(throw new MatchError(x1))
              };
              matchEnd3(x: (Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))){
                x
              }
            }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]))
          };
          case5(){
            matchEnd3(throw new MatchError(x1))
          };
          matchEnd3(x: Seq[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]){
            x
          }
        }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]);
        val invocationMap: Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = var2invocations.groupBy[Strengthener.this.checker.program.trees.Variable](((x$13: (Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))) => x$13._1)).mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$14: Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]) => x$14.map[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]), Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$15: (Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))) => x$15._2))(collection.this.Seq.canBuildFrom[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])])));
        def constraint(v: Strengthener.this.checker.program.trees.Variable, passings: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]): Strengthener.this.SizeConstraint = if (constraints.get(v).==(scala.Some.apply[Strengthener.this.NoConstraint.type](Strengthener.this.NoConstraint)))
          Strengthener.this.NoConstraint
        else
          if (passings.exists(((p: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => Strengthener.this.appConstraint.get(p._1).==(scala.Some.apply[Strengthener.this.NoConstraint.type](Strengthener.this.NoConstraint)))))
            Strengthener.this.NoConstraint
          else
            passings.foldLeft[Strengthener.this.SizeConstraint](constraints.getOrElse[Product with Serializable with Strengthener.this.SizeConstraint](v, Strengthener.this.StrongDecreasing))(((x0$1: Strengthener.this.SizeConstraint, x1$1: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => {
              case <synthetic> val x1: (Strengthener.this.SizeConstraint, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) = scala.Tuple2.apply[Strengthener.this.SizeConstraint, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])](x0$1, x1$1);
              case5(){
                if (x1.ne(null).unary_!)
                  {
                    case6();
                    ()
                  };
                val constraint: Strengthener.this.SizeConstraint = x1._1;
                <synthetic> val p2: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]) = x1._2;
                if (p2.ne(null).unary_!)
                  {
                    case6();
                    ()
                  };
                val key: (stainless.Identifier, stainless.Identifier) = p2._1;
                val path: Strengthener.this.checker.program.trees.Path = p2._2;
                val args: Seq[Strengthener.this.checker.program.trees.Expr] = p2._3;
                matchEnd4({
                  <stable> <accessor> lazy val strongFormula: Strengthener.this.checker.program.trees.Expr = path.implies(Strengthener.this.lessThan(args, fdArgs));
                  <stable> <accessor> lazy val weakFormula: Strengthener.this.checker.program.trees.Expr = path.implies(Strengthener.this.lessEquals(args, fdArgs));
                  {
                    case <synthetic> val x1: (Strengthener.this.SizeConstraint, Option[Strengthener.this.SizeConstraint]) = scala.Tuple2.apply[Strengthener.this.SizeConstraint, Option[Strengthener.this.SizeConstraint]](constraint, Strengthener.this.appConstraint.get(key));
                    case34(){
                      if (x1.ne(null).unary_!)
                        {
                          case35();
                          ()
                        };
                      <synthetic> val p3: Option[Strengthener.this.SizeConstraint] = x1._2;
                      if (p3.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                        {
                          case35();
                          ()
                        };
                      <synthetic> val x4: Some[Strengthener.this.SizeConstraint] = (p3.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                      <synthetic> val p5: Strengthener.this.SizeConstraint = x4.value;
                      if (Strengthener.this.NoConstraint.==(p5).unary_!)
                        {
                          case35();
                          ()
                        };
                      matchEnd33(scala.sys.`package`.error("Whaaaat!?!? This shouldn\'t happen..."))
                    };
                    case35(){
                      if (x1.ne(null).unary_!)
                        {
                          case36();
                          ()
                        };
                      <synthetic> val p7: Option[Strengthener.this.SizeConstraint] = x1._2;
                      if (scala.None.==(p7).unary_!)
                        {
                          case36();
                          ()
                        };
                      matchEnd33(Strengthener.this.NoConstraint)
                    };
                    case36(){
                      if (x1.ne(null).unary_!)
                        {
                          case37();
                          ()
                        };
                      <synthetic> val p8: Strengthener.this.SizeConstraint = x1._1;
                      if (Strengthener.this.NoConstraint.==(p8).unary_!)
                        {
                          case37();
                          ()
                        };
                      matchEnd33(Strengthener.this.NoConstraint)
                    };
                    case37(){
                      if (x1.ne(null).unary_!)
                        {
                          case38();
                          ()
                        };
                      <synthetic> val p10: Strengthener.this.SizeConstraint = x1._1;
                      <synthetic> val p11: Option[Strengthener.this.SizeConstraint] = x1._2;
                      if ({
  case40(){
    if (Strengthener.this.StrongDecreasing.==(p10).unary_!)
      {
        case41();
        ()
      };
    matchEnd39(true)
  };
  case41(){
    if (Strengthener.this.WeakDecreasing.==(p10).unary_!)
      {
        case42();
        ()
      };
    matchEnd39(true)
  };
  case42(){
    matchEnd39(false)
  };
  matchEnd39(x: Boolean){
    x
  }
}.unary_!)
                        {
                          case38();
                          ()
                        };
                      if (p11.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                        {
                          case38();
                          ()
                        };
                      <synthetic> val x12: Some[Strengthener.this.SizeConstraint] = (p11.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                      <synthetic> val p13: Strengthener.this.SizeConstraint = x12.value;
                      if (Strengthener.this.StrongDecreasing.==(p13).unary_!)
                        {
                          case38();
                          ()
                        };
                      matchEnd33(if (api.solveVALID(weakFormula).contains[Boolean](true))
                        Strengthener.this.StrongDecreasing
                      else
                        Strengthener.this.NoConstraint)
                    };
                    case38(){
                      if (x1.ne(null).unary_!)
                        {
                          case43();
                          ()
                        };
                      <synthetic> val p14: Strengthener.this.SizeConstraint = x1._1;
                      <synthetic> val p15: Option[Strengthener.this.SizeConstraint] = x1._2;
                      if (Strengthener.this.StrongDecreasing.==(p14).unary_!)
                        {
                          case43();
                          ()
                        };
                      if (p15.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                        {
                          case43();
                          ()
                        };
                      <synthetic> val x16: Some[Strengthener.this.SizeConstraint] = (p15.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                      <synthetic> val p17: Strengthener.this.SizeConstraint = x16.value;
                      if (Strengthener.this.WeakDecreasing.==(p17).unary_!)
                        {
                          case43();
                          ()
                        };
                      matchEnd33(if (api.solveVALID(strongFormula).contains[Boolean](true))
                        Strengthener.this.StrongDecreasing
                      else
                        if (api.solveVALID(weakFormula).contains[Boolean](true))
                          Strengthener.this.WeakDecreasing
                        else
                          Strengthener.this.NoConstraint)
                    };
                    case43(){
                      if (x1.ne(null).unary_!)
                        {
                          case44();
                          ()
                        };
                      <synthetic> val p18: Strengthener.this.SizeConstraint = x1._1;
                      <synthetic> val p19: Option[Strengthener.this.SizeConstraint] = x1._2;
                      if (Strengthener.this.WeakDecreasing.==(p18).unary_!)
                        {
                          case44();
                          ()
                        };
                      if (p19.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                        {
                          case44();
                          ()
                        };
                      <synthetic> val x20: Some[Strengthener.this.SizeConstraint] = (p19.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                      <synthetic> val p21: Strengthener.this.SizeConstraint = x20.value;
                      if (Strengthener.this.WeakDecreasing.==(p21).unary_!)
                        {
                          case44();
                          ()
                        };
                      matchEnd33(if (api.solveVALID(weakFormula).contains[Boolean](true))
                        Strengthener.this.WeakDecreasing
                      else
                        Strengthener.this.NoConstraint)
                    };
                    case44(){
                      matchEnd33(throw new MatchError(x1))
                    };
                    matchEnd33(x: Strengthener.this.SizeConstraint){
                      x
                    }
                  }
                })
              };
              case6(){
                matchEnd4(throw new MatchError(x1))
              };
              matchEnd4(x: Strengthener.this.SizeConstraint){
                x
              }
            }));
        val outers: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = invocationMap.mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$16: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]) => x$16.filter(((x$17: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => x$17._1._1.!=(fd)))));
        fdHOArgs.foreach[Unit](((v: Strengthener.this.checker.program.trees.Variable) => Strengthener.this.appConstraint.update(scala.Predef.ArrowAssoc[inox.ast.Identifier](fd.id).->[inox.ast.Identifier](v.id), constraint(v, outers.getOrElse[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](v, scala.collection.Seq.empty[Nothing])))));
        val selfs: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = invocationMap.mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$18: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]) => x$18.filter(((x$19: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => x$19._1._1.==(fd)))));
        fdHOArgs.foreach[Unit](((v: Strengthener.this.checker.program.trees.Variable) => Strengthener.this.appConstraint.update(scala.Predef.ArrowAssoc[inox.ast.Identifier](fd.id).->[inox.ast.Identifier](v.id), constraint(v, selfs.getOrElse[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](v, scala.collection.Seq.empty[Nothing])))));
        Strengthener.this.strengthenedApp.+=(fd)
      }))
    };
    object refinementCache extends scala.AnyRef {
      def <init>(): Strengthener.this.refinementCache.type = {
        refinementCache.super.<init>();
        ()
      };
      private[this] val cache: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = scala.collection.mutable.Map.empty[(stainless.Identifier, stainless.Identifier), Seq[Strengthener.this.checker.program.trees.Type]];
      <stable> <accessor> private def cache: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = refinementCache.this.cache;
      def add(p: ((stainless.Identifier, stainless.Identifier), Seq[Strengthener.this.checker.program.trees.Type])): Unit = {
        val oldTypes: Seq[Strengthener.this.checker.program.trees.Type] = refinementCache.this.cache.getOrElse[Seq[Strengthener.this.checker.program.trees.Type]](p._1, scala.collection.Seq.apply[Nothing]());
        refinementCache.this.cache.update(p._1, oldTypes.++[Strengthener.this.checker.program.trees.Type, Seq[Strengthener.this.checker.program.trees.Type]](p._2)(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Type]))
      };
      def get: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = refinementCache.this.cache
    };
    <stable> <accessor> val cfa: stainless.termination.CICFA{val program: stainless.termination.TerminationChecker.<refinement>.type};
    def annotateStrength(funDef: Strengthener.this.checker.program.trees.FunDef): Strengthener.this.checker.program.trees.FunDef = {
      val analysis: Strengthener.this.cfa.Analysis = Strengthener.this.cfa.analyze(funDef.id);
      object transformer extends AnyRef with stainless.transformers.TransformerWithPC with stainless.transformers.DefinitionTransformer {
        def <init>(): transformer.type = {
          transformer.super.<init>();
          ()
        };
        private[this] val s: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
        <stable> <accessor> def s: Strengthener.this.checker.program.trees.type = transformer.this.s;
        private[this] val t: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
        <stable> <accessor> def t: Strengthener.this.checker.program.trees.type = transformer.this.t;
        private[this] val symbols: Strengthener.this.checker.program.symbols.type = Strengthener.this.checker.program.symbols;
        <stable> <accessor> def symbols: Strengthener.this.checker.program.symbols.type = transformer.this.symbols;
        type Env = Strengthener.this.checker.program.trees.Path;
        private[this] val initEnv: Strengthener.this.checker.program.trees.Path = Strengthener.this.checker.program.trees.Path.empty;
        <stable> <accessor> def initEnv: Strengthener.this.checker.program.trees.Path = transformer.this.initEnv;
        private[this] val pp: Strengthener.this.checker.program.trees.Path.type = Strengthener.this.checker.program.trees.Path;
        <stable> <accessor> def pp: Strengthener.this.checker.program.trees.Path.type = transformer.this.pp;
        private[this] var inLambda: Boolean = false;
        <accessor> def inLambda: Boolean = transformer.this.inLambda;
        <accessor> def inLambda_=(x$1: Boolean): Unit = transformer.this.inLambda = x$1;
        override def transform(e: Strengthener.this.checker.program.trees.Expr, path: Strengthener.this.checker.program.trees.Path): Strengthener.this.checker.program.trees.Expr = {
          case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = e;
          case7(){
            if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
              {
                case8();
                ()
              };
            <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
            val fid: inox.ast.Identifier = x2.id;
            val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
            matchEnd6({
              <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
                case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
                case6(){
                  if (x1.ne(null).unary_!)
                    {
                      case7();
                      ()
                    };
                  val id: inox.ast.Identifier = x1._1;
                  val l: Strengthener.this.checker.program.trees.Expr = x1._2;
                  if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
                    {
                      case7();
                      ()
                    };
                  <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
                  val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
                  val body: Strengthener.this.checker.program.trees.Expr = x2.body;
                  if (analysis.isApplied(x2).unary_!)
                    {
                      case7();
                      ()
                    };
                  matchEnd5({
                    val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
                    val old: Boolean = transformer.this.inLambda;
                    transformer.this.inLambda_=(true);
                    val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
                      val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
                      val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
                      val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
                      {
                        <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
                        <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
                        <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
                        arg.copy(x$2, x$1, x$3)
                      }
                    }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                    val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
                    val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                    val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                    val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
                    val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
                    val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                    val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
                    val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
                    Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
                    transformer.this.inLambda_=(old);
                    Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
                  })
                };
                case7(){
                  if (x1.ne(null).unary_!)
                    {
                      case8();
                      ()
                    };
                  val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
                  matchEnd5(transformer.this.transform(arg, path))
                };
                case8(){
                  matchEnd5(throw new MatchError(x1))
                };
                matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
                  x
                }
              }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
              <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
              <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
              x2.copy(x$5, x$6, x$4)
            })
          };
          case8(){
            if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
              {
                case9();
                ()
              };
            <synthetic> val x4: Strengthener.this.checker.program.trees.Lambda = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
            matchEnd6(if (analysis.isApplied(x4))
              {
                val old: Boolean = transformer.this.inLambda;
                transformer.this.inLambda_=(true);
                val res: stainless.termination.Strengthener.transformer.t.Expr = transformer.super.transform(e, path);
                transformer.this.inLambda_=(old);
                res
              }
            else
              x4)
          };
          case9(){
            matchEnd6(transformer.super.transform(e, path))
          };
          matchEnd6(x: Strengthener.this.checker.program.trees.Expr){
            x
          }
        }
      };
      transformer.transform(funDef)
    }
  }
}
TRANSFORM: null
TREE: package stainless {
  package termination {
    import scala.collection.mutable.{Set=>MutableSet, Map=>MutableMap};
    import scala.language.existentials;
    object optIgnorePosts extends inox.FlagOptionDef {
      def <init>(): stainless.termination.optIgnorePosts.type = {
        optIgnorePosts.super.<init>("ignore-posts", false);
        ()
      };
      <synthetic> private def readResolve(): Object = stainless.termination.optIgnorePosts
    };
    abstract trait Strengthener extends scala.AnyRef { self: stainless.termination.Strengthener with stainless.termination.OrderingRelation => 
      def /*Strengthener*/$init$(): Unit = {
        ()
      };
      <stable> <accessor> val checker: stainless.termination.ProcessingPipeline;
      import Strengthener.this.checker._;
      import Strengthener.this.checker.context._;
      import Strengthener.this.checker.program._;
      import Strengthener.this.checker.program.trees._;
      import Strengthener.this.checker.program.symbols._;
      import Strengthener.this.checker.program.symbols.CallGraphOrderings._;
      <stable> <accessor> private val strengthenedPost: scala.collection.mutable.Map[stainless.Identifier,Option[Strengthener.this.checker.program.trees.Lambda]] = scala.collection.mutable.Map.empty[stainless.Identifier, Option[Strengthener.this.checker.program.trees.Lambda]];
      <stable> <accessor> lazy private val ignorePosts: Boolean = Strengthener.this.checker.context.options.findOptionOrDefault[Boolean](optIgnorePosts)((ClassTag.Boolean: scala.reflect.ClassTag[Boolean]));
      private object postStrengthener extends AnyRef with Strengthener.this.checker.program.trees.IdentitySymbolTransformer {
        def <init>(): Strengthener.this.postStrengthener.type = {
          postStrengthener.super.<init>();
          ()
        };
        override def transform(syms: Strengthener.this.checker.program.trees.Symbols): Strengthener.this.checker.program.trees.Symbols = syms.withFunctions(syms.functions.toSeq.map[Strengthener.this.checker.program.trees.FunDef, Seq[Strengthener.this.checker.program.trees.FunDef]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.FunDef)) => {
          case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.FunDef) = x0$1;
          case4(){
            if (x1.ne(null).unary_!)
              {
                case5();
                ()
              };
            val id: inox.ast.Identifier = x1._1;
            val fd: Strengthener.this.checker.program.trees.FunDef = x1._2;
            matchEnd3({
              case <synthetic> val x1: Option[Option[Strengthener.this.checker.program.trees.Lambda]] = Strengthener.this.strengthenedPost.get(id);
              case7(){
                if (x1.isInstanceOf[Some[Option[Strengthener.this.checker.program.trees.Lambda]]].unary_!)
                  {
                    case8();
                    ()
                  };
                <synthetic> val x2: Some[Option[Strengthener.this.checker.program.trees.Lambda]] = (x1.asInstanceOf[Some[Option[Strengthener.this.checker.program.trees.Lambda]]]: Some[Option[Strengthener.this.checker.program.trees.Lambda]]);
                val post: Option[Strengthener.this.checker.program.trees.Lambda] = x2.value;
                if (post.isInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]].unary_!)
                  {
                    case8();
                    ()
                  };
                <synthetic> val x3: Some[Strengthener.this.checker.program.trees.Lambda] = (post.asInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]]: Some[Strengthener.this.checker.program.trees.Lambda]);
                matchEnd6({
                  <artifact> val x$1: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.withPostcondition(fd.fullBody, x3);
                  <artifact> val x$2: inox.ast.Identifier = fd.copy$default$1;
                  <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.TypeParameterDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$2;
                  <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.ValDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$3;
                  <artifact> val x$5: Strengthener.this.checker.program.trees.Type = fd.copy$default$4;
                  <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$6;
                  fd.copy(x$2, x$3, x$4, x$5, x$1, x$6)
                })
              };
              case8(){
                matchEnd6(fd)
              };
              matchEnd6(x: Strengthener.this.checker.program.trees.FunDef){
                x
              }
            })
          };
          case5(){
            matchEnd3(throw new MatchError(x1))
          };
          matchEnd3(x: Strengthener.this.checker.program.trees.FunDef){
            x
          }
        }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.FunDef]))
      };
      Strengthener.this.registerTransformer(Strengthener.this.postStrengthener);
      def strengthenPostconditions(funDefs: Set[Strengthener.this.checker.program.trees.FunDef])(implicit dbg: inox.DebugSection): Unit = {
        Strengthener.this.checker.context.reporter.debug("- Strengthening postconditions")(dbg);
        val callees: Set[Strengthener.this.checker.program.trees.FunDef] = funDefs.flatMap[Strengthener.this.checker.program.symbols.trees.FunDef, Set[Strengthener.this.checker.program.trees.FunDef]](((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.symbols.transitiveCallees(fd)))(immutable.this.Set.canBuildFrom[Strengthener.this.checker.program.trees.FunDef]);
        val sortedCallees: Seq[Strengthener.this.checker.program.trees.FunDef] = callees.toSeq.sorted[Strengthener.this.checker.program.trees.FunDef](Strengthener.this.checker.program.symbols.CallGraphOrderings.functionOrdering);
        sortedCallees.withFilter(((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).isDefined.&&(Strengthener.this.strengthenedPost.isDefinedAt(fd.id).unary_!).&&(Strengthener.this.checker.terminates(fd).isGuaranteed))).foreach[Unit](((fd: Strengthener.this.checker.program.trees.FunDef) => {
          Strengthener.this.strengthenedPost.update(fd.id, scala.None);
          def strengthen(cmp: (Seq[Strengthener.this.checker.program.trees.Expr], Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.checker.program.trees.Expr): Boolean = {
            val postcondition: Strengthener.this.checker.program.trees.Lambda = {
              val res: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("res", fd.returnType, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
              val post: Strengthener.this.checker.program.symbols.trees.Expr = {
                case <synthetic> val x1: Option[Strengthener.this.checker.program.trees.Lambda] = Strengthener.this.checker.program.trees.StainlessFunDef(fd).postcondition(Strengthener.this.checker.program.symbols.implicitSymbols);
                case5(){
                  if (x1.isInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]].unary_!)
                    {
                      case6();
                      ()
                    };
                  <synthetic> val x2: Some[Strengthener.this.checker.program.trees.Lambda] = (x1.asInstanceOf[Some[Strengthener.this.checker.program.trees.Lambda]]: Some[Strengthener.this.checker.program.trees.Lambda]);
                  val post: Strengthener.this.checker.program.trees.Lambda = x2.value;
                  if (Strengthener.this.ignorePosts)
                    {
                      case6();
                      ()
                    };
                  matchEnd4(Strengthener.this.checker.program.symbols.application(post, scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Variable](res.toVariable)))
                };
                case6(){
                  matchEnd4(Strengthener.this.checker.program.trees.BooleanLiteral.apply(true))
                };
                matchEnd4(x: Strengthener.this.checker.program.symbols.trees.Expr){
                  x
                }
              };
              val sizePost: Strengthener.this.checker.program.trees.Expr = cmp.apply(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Variable](res.toVariable), fd.params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$1: Strengthener.this.checker.program.trees.ValDef) => x$1.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
              Strengthener.this.checker.program.trees.Lambda.apply(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.ValDef](res), Strengthener.this.checker.program.trees.and(post, sizePost))
            };
            val formula: Strengthener.this.checker.program.trees.Expr = Strengthener.this.checker.program.trees.implies(Strengthener.this.checker.program.trees.StainlessFunDef(fd).precOrTrue(Strengthener.this.checker.program.symbols.implicitSymbols), Strengthener.this.checker.program.symbols.application(postcondition, scala.collection.Seq.apply[Strengthener.this.checker.program.trees.Expr](Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).get)));
            val strengthener: Strengthener.this.checker.program.trees.IdentitySymbolTransformer = {
              final class $anon extends AnyRef with Strengthener.this.checker.program.trees.IdentitySymbolTransformer {
                def <init>(): <$anon: Strengthener.this.checker.program.trees.IdentitySymbolTransformer> = {
                  $anon.super.<init>();
                  ()
                };
                override def transform(syms: Strengthener.this.checker.program.trees.Symbols): Strengthener.this.checker.program.trees.Symbols = $anon.super.transform(syms).withFunctions(scala.collection.Seq.apply[Strengthener.this.checker.program.trees.FunDef]({
                  <artifact> val x$1: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.withPostcondition(fd.fullBody, scala.Some.apply[Strengthener.this.checker.program.trees.Lambda](postcondition));
                  <artifact> val x$2: inox.ast.Identifier = fd.copy$default$1;
                  <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.TypeParameterDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$2;
                  <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.ValDef] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$3;
                  <artifact> val x$5: Strengthener.this.checker.program.trees.Type = fd.copy$default$4;
                  <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = fd.copy$default$6;
                  fd.copy(x$2, x$3, x$4, x$5, x$1, x$6)
                }))
              };
              new $anon()
            };
            val api: inox.solvers.SimpleSolverAPI{val program: inox.Program{val trees: Strengthener.this.checker.program.trees.type}} = Strengthener.this.getAPI(strengthener);
            if (Strengthener.this.checker.program.trees.exprOps.variablesOf(formula).nonEmpty.&&(api.solveVALID(formula).contains[Boolean](true)))
              {
                Strengthener.this.strengthenedPost.update(fd.id, scala.Some.apply[Strengthener.this.checker.program.trees.Lambda](postcondition));
                true
              }
            else
              false
          };
          val weakConstraintHolds: Boolean = strengthen({
            ((args1: Seq[Strengthener.this.checker.program.trees.Expr], args2: Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.lessEquals(args1, args2))
          });
          val strongConstraintHolds: Boolean = if (weakConstraintHolds)
            strengthen({
              ((args1: Seq[Strengthener.this.checker.program.trees.Expr], args2: Seq[Strengthener.this.checker.program.trees.Expr]) => Strengthener.this.lessThan(args1, args2))
            })
          else
            false;
          ()
        }))
      };
      sealed abstract class SizeConstraint extends scala.AnyRef {
        def <init>(): Strengthener.this.SizeConstraint = {
          SizeConstraint.super.<init>();
          ()
        }
      };
      case object StrongDecreasing extends Strengthener.this.SizeConstraint with Product with Serializable {
        def <init>(): Strengthener.this.StrongDecreasing.type = {
          StrongDecreasing.super.<init>();
          ()
        };
        override <synthetic> def productPrefix: String = "StrongDecreasing";
        <synthetic> def productArity: Int = 0;
        <synthetic> def productElement(x$1: Int): Any = {
          case <synthetic> val x1: Int = x$1;
          case4(){
            matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
          };
          matchEnd3(x: Any){
            x
          }
        };
        override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](StrongDecreasing.this);
        <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.StrongDecreasing.type]();
        override <synthetic> def hashCode(): Int = -559514638;
        override <synthetic> def toString(): String = "StrongDecreasing"
      };
      case object WeakDecreasing extends Strengthener.this.SizeConstraint with Product with Serializable {
        def <init>(): Strengthener.this.WeakDecreasing.type = {
          WeakDecreasing.super.<init>();
          ()
        };
        override <synthetic> def productPrefix: String = "WeakDecreasing";
        <synthetic> def productArity: Int = 0;
        <synthetic> def productElement(x$1: Int): Any = {
          case <synthetic> val x1: Int = x$1;
          case4(){
            matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
          };
          matchEnd3(x: Any){
            x
          }
        };
        override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](WeakDecreasing.this);
        <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.WeakDecreasing.type]();
        override <synthetic> def hashCode(): Int = -788904045;
        override <synthetic> def toString(): String = "WeakDecreasing"
      };
      case object NoConstraint extends Strengthener.this.SizeConstraint with Product with Serializable {
        def <init>(): Strengthener.this.NoConstraint.type = {
          NoConstraint.super.<init>();
          ()
        };
        override <synthetic> def productPrefix: String = "NoConstraint";
        <synthetic> def productArity: Int = 0;
        <synthetic> def productElement(x$1: Int): Any = {
          case <synthetic> val x1: Int = x$1;
          case4(){
            matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
          };
          matchEnd3(x: Any){
            x
          }
        };
        override <synthetic> def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](NoConstraint.this);
        <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[Strengthener.this.NoConstraint.type]();
        override <synthetic> def hashCode(): Int = 1388500638;
        override <synthetic> def toString(): String = "NoConstraint"
      };
      <stable> <accessor> private val strengthenedApp: scala.collection.mutable.Set[Strengthener.this.checker.program.trees.FunDef] = scala.collection.mutable.Set.empty[Strengthener.this.checker.program.trees.FunDef];
      protected def strengthened(fd: Strengthener.this.checker.program.trees.FunDef): Boolean = Strengthener.this.strengthenedApp.apply(fd);
      <stable> <accessor> private val appConstraint: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Strengthener.this.SizeConstraint] = scala.collection.mutable.Map.empty[(stainless.Identifier, stainless.Identifier), Strengthener.this.SizeConstraint];
      def applicationConstraint(fid: stainless.Identifier, id: stainless.Identifier, largs: Seq[Strengthener.this.checker.program.trees.ValDef], args: Seq[Strengthener.this.checker.program.trees.Expr]): Strengthener.this.checker.program.trees.Expr = {
        <synthetic> var rc9: Boolean = false;
        <synthetic> var x2: Some[Strengthener.this.SizeConstraint] = null.asInstanceOf[Some[Strengthener.this.SizeConstraint]];
        {
          case <synthetic> val x1: Option[Strengthener.this.SizeConstraint] = Strengthener.this.appConstraint.get(scala.Predef.ArrowAssoc[stainless.Identifier](fid).->[stainless.Identifier](id));
          case11(){
            if (x1.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
              {
                case12();
                ()
              };
            rc9 = true;
            x2 = (x1.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
            {
              <synthetic> val p3: Strengthener.this.SizeConstraint = x2.value;
              if (Strengthener.this.StrongDecreasing.==(p3).unary_!)
                {
                  case12();
                  ()
                };
              matchEnd10(Strengthener.this.lessThan(largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$2: Strengthener.this.checker.program.trees.ValDef) => x$2.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]), args))
            }
          };
          case12(){
            if (rc9.unary_!)
              {
                case13();
                ()
              };
            <synthetic> val p5: Strengthener.this.SizeConstraint = x2.value;
            if (Strengthener.this.WeakDecreasing.==(p5).unary_!)
              {
                case13();
                ()
              };
            matchEnd10(Strengthener.this.lessEquals(largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$3: Strengthener.this.checker.program.trees.ValDef) => x$3.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]), args))
          };
          case13(){
            matchEnd10(Strengthener.this.checker.program.trees.BooleanLiteral.apply(true))
          };
          matchEnd10(x: Strengthener.this.checker.program.trees.Expr){
            x
          }
        }
      };
      def strengthenApplications(funDefs: Set[Strengthener.this.checker.program.trees.FunDef])(implicit dbg: inox.DebugSection): Unit = {
        Strengthener.this.checker.context.reporter.debug("- Strengthening applications")(dbg);
        val api: inox.solvers.SimpleSolverAPI{val program: inox.Program{val trees: Strengthener.this.checker.program.trees.type}} = Strengthener.this.getAPI;
        val transitiveFunDefs: scala.collection.immutable.Set[Strengthener.this.checker.program.trees.FunDef] = funDefs.++(funDefs.flatMap[Strengthener.this.checker.program.symbols.trees.FunDef, scala.collection.immutable.Set[Strengthener.this.checker.program.symbols.trees.FunDef]]({
          ((from: Strengthener.this.checker.program.symbols.trees.FunDef) => Strengthener.this.checker.program.symbols.transitiveCallees(from))
        })(immutable.this.Set.canBuildFrom[Strengthener.this.checker.program.symbols.trees.FunDef]));
        val sortedFunDefs: Seq[Strengthener.this.checker.program.trees.FunDef] = transitiveFunDefs.toSeq.sorted[Strengthener.this.checker.program.trees.FunDef](Strengthener.this.checker.program.symbols.CallGraphOrderings.functionOrdering);
        sortedFunDefs.withFilter(((fd: Strengthener.this.checker.program.trees.FunDef) => Strengthener.this.checker.program.trees.StainlessFunDef(fd).body(Strengthener.this.checker.program.symbols.implicitSymbols).isDefined.&&(Strengthener.this.strengthenedApp.apply(fd).unary_!).&&(Strengthener.this.checker.terminates(fd).isGuaranteed))).foreach[scala.collection.mutable.Set[Strengthener.this.checker.program.trees.FunDef]](((fd: Strengthener.this.checker.program.trees.FunDef) => {
          val applications: Seq[(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])] = Strengthener.this.checker.program.symbols.collectWithPC[(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])](fd.fullBody)(({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])] with Serializable {
    def <init>(): <$anon: ((Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)) => (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path), B1 >: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x1.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
      case7(){
        if (x1.ne(null).unary_!)
          {
            case8();
            ()
          };
        <synthetic> val p2: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
        val path: Strengthener.this.checker.program.symbols.trees.Path = x1._2;
        if (p2.isInstanceOf[Strengthener.this.checker.program.trees.Application].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x3: Strengthener.this.checker.program.trees.Application = (p2.asInstanceOf[Strengthener.this.checker.program.trees.Application]: Strengthener.this.checker.program.trees.Application);
        val v: Strengthener.this.checker.program.trees.Expr = x3.callee;
        val args: Seq[Strengthener.this.checker.program.trees.Expr] = x3.args;
        if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x4: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd6(scala.Tuple3.apply[Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](path, x4, args))
      };
      case8(){
        matchEnd6(default.apply(x1))
      };
      matchEnd6(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): Boolean = {
      case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x1.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
      case7(){
        if (x1.ne(null).unary_!)
          {
            case8();
            ()
          };
        <synthetic> val p2: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
        if (p2.isInstanceOf[Strengthener.this.checker.program.trees.Application].unary_!)
          {
            case8();
            ()
          };
        <synthetic> val x3: Strengthener.this.checker.program.trees.Application = (p2.asInstanceOf[Strengthener.this.checker.program.trees.Application]: Strengthener.this.checker.program.trees.Application);
        val v: Strengthener.this.checker.program.trees.Expr = x3.callee;
        if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case8();
            ()
          };
        matchEnd6(true)
      };
      case8(){
        matchEnd6(false)
      };
      matchEnd6(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])])).distinct;
          val fdArgs: Seq[Strengthener.this.checker.program.trees.Variable] = fd.params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$4: Strengthener.this.checker.program.trees.ValDef) => x$4.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
          val allFormulas: Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))] = applications.withFilter(((check$ifrefutable$1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) = (check$ifrefutable$1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)), Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]](((x$5: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr])) => {
            case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) = (x$5: (Strengthener.this.checker.program.symbols.trees.Path, Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]) @unchecked);
            case4(){
              if (x1.ne(null).unary_!)
                {
                  case5();
                  ()
                };
              val path: Strengthener.this.checker.program.symbols.trees.Path = x1._1;
              val v: Strengthener.this.checker.program.trees.Variable = x1._2;
              val appArgs: Seq[Strengthener.this.checker.program.trees.Expr] = x1._3;
              matchEnd3({
                val soft: Strengthener.this.checker.program.symbols.trees.Expr = path.implies(Strengthener.this.lessEquals(appArgs, fdArgs));
                val hard: Strengthener.this.checker.program.symbols.trees.Expr = path.implies(Strengthener.this.lessThan(appArgs, fdArgs));
                scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)](scala.Tuple2.apply[Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr](soft, hard))
              })
            };
            case5(){
              matchEnd3(throw new MatchError(x1))
            };
            matchEnd3(x: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))){
              x
            }
          }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]);
          val formulaMap: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,(_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }] = allFormulas.view.groupBy[Strengthener.this.checker.program.trees.Variable](((x$6: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))) => x$6._1)).mapValues[(_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }](((x$7: scala.collection.SeqView[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)),Seq[(Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))]]) => x$7.map[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr), scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]]](((x$8: (Strengthener.this.checker.program.trees.Variable, (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr))) => x$8._2))(collection.this.SeqView.canBuildFrom[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)]).unzip[Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr](scala.Predef.$conforms[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr)]))).toMap[Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })]);
          val constraints: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Product with Serializable with Strengthener.this.SizeConstraint] = formulaMap.withFilter(((check$ifrefutable$2: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) = (check$ifrefutable$2: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) @unchecked);
  case6(){
    if (x1.ne(null).unary_!)
      {
        case7();
        ()
      };
    <synthetic> val p2: (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] } = x1._2;
    if (p2.isInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])].unary_!)
      {
        case7();
        ()
      };
    matchEnd5(true)
  };
  case7(){
    matchEnd5(false)
  };
  matchEnd5(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint), scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Product with Serializable with Strengthener.this.SizeConstraint]](((x$9: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] })) => {
            case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) = (x$9: (Strengthener.this.checker.program.trees.Variable, (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] }) @unchecked);
            case6(){
              if (x1.ne(null).unary_!)
                {
                  case7();
                  ()
                };
              val v: Strengthener.this.checker.program.trees.Variable = x1._1;
              <synthetic> val p2: (_1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr], _1.Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) forSome { val _1: scala.collection.SeqView[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Expr),Seq[_]] } = x1._2;
              if (p2.isInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])].unary_!)
                {
                  case7();
                  ()
                };
              <synthetic> val x3: (Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr]) = (p2.asInstanceOf[(Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr])]: (Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr], Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr]));
              val weakFormulas: Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr] = x3._1;
              val strongFormulas: Nothing#Transformed[Strengthener.this.checker.program.symbols.trees.Expr] = x3._2;
              matchEnd5(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[Product with Serializable with Strengthener.this.SizeConstraint](if (api.solveVALID(Strengthener.this.checker.program.trees.andJoin(weakFormulas.toSeq)).contains[Boolean](true))
                if (api.solveVALID(Strengthener.this.checker.program.trees.andJoin(strongFormulas.toSeq)).contains[Boolean](true))
                  Strengthener.this.StrongDecreasing
                else
                  Strengthener.this.WeakDecreasing
              else
                Strengthener.this.NoConstraint))
            };
            case7(){
              matchEnd5(throw new MatchError(x1))
            };
            matchEnd5(x: (Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint)){
              x
            }
          }))(immutable.this.Map.canBuildFrom[Strengthener.this.checker.program.trees.Variable, Product with Serializable with Strengthener.this.SizeConstraint]);
          val fdHOArgs: scala.collection.immutable.Set[Strengthener.this.checker.program.trees.Variable] = fdArgs.filter(((x$10: Strengthener.this.checker.program.trees.Variable) => x$10.tpe.isInstanceOf[Strengthener.this.checker.program.trees.FunctionType])).toSet[Strengthener.this.checker.program.trees.Variable];
          val invocations: Seq[(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])] = Strengthener.this.checker.program.symbols.collectWithPC[(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])](fd.fullBody)(({
            @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])] with Serializable {
              def <init>(): <$anon: ((Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)) => (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])> = {
                $anonfun.super.<init>();
                ()
              };
              final override def applyOrElse[A1 <: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path), B1 >: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])](x2: A1, default: A1 => B1): B1 = {
                case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x2.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
                case7(){
                  if (x1.ne(null).unary_!)
                    {
                      case8();
                      ()
                    };
                  val fi: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
                  val path: Strengthener.this.checker.program.symbols.trees.Path = x1._2;
                  if (fi.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
                    {
                      case8();
                      ()
                    };
                  <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (fi.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
                  val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
                  if (fdHOArgs.intersect(args.collect[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable] with Serializable {
    def <init>(): <$anon: Strengthener.this.checker.program.trees.Expr => Strengthener.this.checker.program.trees.Variable> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: Strengthener.this.checker.program.trees.Expr, B1 >: Strengthener.this.checker.program.trees.Variable](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd4(x2)
      };
      case6(){
        matchEnd4(default.apply(x1))
      };
      matchEnd4(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: Strengthener.this.checker.program.trees.Expr): Boolean = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        matchEnd4(true)
      };
      case6(){
        matchEnd4(false)
      };
      matchEnd4(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable]))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]).toSet[Strengthener.this.checker.program.trees.Variable]).nonEmpty.unary_!)
                    {
                      case8();
                      ()
                    };
                  matchEnd6(scala.Tuple3.apply[Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]](path, args, args.zip[Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef, Seq[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]](x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).fd.params)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]).collect[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)), Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]](({
                    @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef),(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))] with Serializable {
                      def <init>(): <$anon: ((Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)) => (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))> = {
                        $anonfun.super.<init>();
                        ()
                      };
                      final override def applyOrElse[A1 <: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef), B1 >: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))](x2: A1, default: A1 => B1): B1 = {
                        case <synthetic> val x1: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) = ((x2.asInstanceOf[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) @unchecked);
                        case5(){
                          if (x1.ne(null).unary_!)
                            {
                              case6();
                              ()
                            };
                          val v: Strengthener.this.checker.program.trees.Expr = x1._1;
                          val vd: Strengthener.this.checker.program.trees.ValDef = x1._2;
                          if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
                            {
                              case6();
                              ()
                            };
                          <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
                          if (fdHOArgs.apply(x2).unary_!)
                            {
                              case6();
                              ()
                            };
                          matchEnd4(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](x2).->[(inox.ast.Identifier, inox.ast.Identifier)](scala.Tuple2.apply[inox.ast.Identifier, inox.ast.Identifier](x2.id, vd.id)))
                        };
                        case6(){
                          matchEnd4(default.apply(x2))
                        };
                        matchEnd4(x: B1){
                          x
                        }
                      };
                      final def isDefinedAt(x2: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): Boolean = {
                        case <synthetic> val x1: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) = ((x2.asInstanceOf[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)]: (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef)): (Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef) @unchecked);
                        case5(){
                          if (x1.ne(null).unary_!)
                            {
                              case6();
                              ()
                            };
                          val v: Strengthener.this.checker.program.trees.Expr = x1._1;
                          if (v.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
                            {
                              case6();
                              ()
                            };
                          <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (v.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
                          if (fdHOArgs.apply(x2).unary_!)
                            {
                              case6();
                              ()
                            };
                          matchEnd4(true)
                        };
                        case6(){
                          matchEnd4(false)
                        };
                        matchEnd4(x: Boolean){
                          x
                        }
                      }
                    };
                    new $anonfun()
                  }: PartialFunction[(Strengthener.this.checker.program.trees.Expr, Strengthener.this.checker.program.trees.ValDef),(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])))
                };
                case8(){
                  matchEnd6(default.apply(x2))
                };
                matchEnd6(x: B1){
                  x
                }
              };
              final def isDefinedAt(x2: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): Boolean = {
                case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) = ((x2.asInstanceOf[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)]: (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path)): (Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path) @unchecked);
                case7(){
                  if (x1.ne(null).unary_!)
                    {
                      case8();
                      ()
                    };
                  val fi: Strengthener.this.checker.program.symbols.trees.Expr = x1._1;
                  if (fi.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
                    {
                      case8();
                      ()
                    };
                  <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (fi.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
                  val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
                  if (fdHOArgs.intersect(args.collect[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable] with Serializable {
    def <init>(): <$anon: Strengthener.this.checker.program.trees.Expr => Strengthener.this.checker.program.trees.Variable> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: Strengthener.this.checker.program.trees.Expr, B1 >: Strengthener.this.checker.program.trees.Variable](x1: A1, default: A1 => B1): B1 = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        <synthetic> val x2: Strengthener.this.checker.program.trees.Variable = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Variable]: Strengthener.this.checker.program.trees.Variable);
        matchEnd4(x2)
      };
      case6(){
        matchEnd4(default.apply(x1))
      };
      matchEnd4(x: B1){
        x
      }
    };
    final def isDefinedAt(x1: Strengthener.this.checker.program.trees.Expr): Boolean = {
      case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = ((x1.asInstanceOf[Strengthener.this.checker.program.trees.Expr]: Strengthener.this.checker.program.trees.Expr): Strengthener.this.checker.program.trees.Expr @unchecked);
      case5(){
        if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Variable].unary_!)
          {
            case6();
            ()
          };
        matchEnd4(true)
      };
      case6(){
        matchEnd4(false)
      };
      matchEnd4(x: Boolean){
        x
      }
    }
  };
  new $anonfun()
}: PartialFunction[Strengthener.this.checker.program.trees.Expr,Strengthener.this.checker.program.trees.Variable]))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]).toSet[Strengthener.this.checker.program.trees.Variable]).nonEmpty.unary_!)
                    {
                      case8();
                      ()
                    };
                  matchEnd6(true)
                };
                case8(){
                  matchEnd6(false)
                };
                matchEnd6(x: Boolean){
                  x
                }
              }
            };
            new $anonfun()
          }: PartialFunction[(Strengthener.this.checker.program.symbols.trees.Expr, Strengthener.this.checker.program.symbols.trees.Path),(Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])]));
          val var2invocations: Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))] = invocations.withFilter(((check$ifrefutable$3: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) = (check$ifrefutable$3: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).flatMap[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])), Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]](((x$12: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))])) => {
            case <synthetic> val x1: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) = (x$12: (Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr], Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))]) @unchecked);
            case4(){
              if (x1.ne(null).unary_!)
                {
                  case5();
                  ()
                };
              val path: Strengthener.this.checker.program.symbols.trees.Path = x1._1;
              val args: Seq[Strengthener.this.checker.program.trees.Expr] = x1._2;
              val mapping: Seq[(Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))] = x1._3;
              matchEnd3(mapping.withFilter(((check$ifrefutable$4: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))) => {
  case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) = (check$ifrefutable$4: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) @unchecked);
  case4(){
    if (x1.ne(null).unary_!)
      {
        case5();
        ()
      };
    matchEnd3(true)
  };
  case5(){
    matchEnd3(false)
  };
  matchEnd3(x: Boolean){
    x
  }
})).map[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])), Seq[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]](((x$11: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier))) => {
                case <synthetic> val x1: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) = (x$11: (Strengthener.this.checker.program.trees.Variable, (inox.ast.Identifier, inox.ast.Identifier)) @unchecked);
                case4(){
                  if (x1.ne(null).unary_!)
                    {
                      case5();
                      ()
                    };
                  val v: Strengthener.this.checker.program.trees.Variable = x1._1;
                  val p: (inox.ast.Identifier, inox.ast.Identifier) = x1._2;
                  matchEnd3(scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](v).->[((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])](scala.Tuple3.apply[(inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]](p, path, args)))
                };
                case5(){
                  matchEnd3(throw new MatchError(x1))
                };
                matchEnd3(x: (Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))){
                  x
                }
              }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]))
            };
            case5(){
              matchEnd3(throw new MatchError(x1))
            };
            matchEnd3(x: Seq[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]){
              x
            }
          }))(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, ((inox.ast.Identifier, inox.ast.Identifier), Strengthener.this.checker.program.symbols.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]);
          val invocationMap: Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = var2invocations.groupBy[Strengthener.this.checker.program.trees.Variable](((x$13: (Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))) => x$13._1)).mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$14: Seq[(Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))]) => x$14.map[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]), Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$15: (Strengthener.this.checker.program.trees.Variable, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]))) => x$15._2))(collection.this.Seq.canBuildFrom[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])])));
          def constraint(v: Strengthener.this.checker.program.trees.Variable, passings: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]): Strengthener.this.SizeConstraint = if (constraints.get(v).==(scala.Some.apply[Strengthener.this.NoConstraint.type](Strengthener.this.NoConstraint)))
            Strengthener.this.NoConstraint
          else
            if (passings.exists(((p: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => Strengthener.this.appConstraint.get(p._1).==(scala.Some.apply[Strengthener.this.NoConstraint.type](Strengthener.this.NoConstraint)))))
              Strengthener.this.NoConstraint
            else
              passings.foldLeft[Strengthener.this.SizeConstraint](constraints.getOrElse[Product with Serializable with Strengthener.this.SizeConstraint](v, Strengthener.this.StrongDecreasing))(((x0$1: Strengthener.this.SizeConstraint, x1$1: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => {
                case <synthetic> val x1: (Strengthener.this.SizeConstraint, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) = scala.Tuple2.apply[Strengthener.this.SizeConstraint, ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])](x0$1, x1$1);
                case5(){
                  if (x1.ne(null).unary_!)
                    {
                      case6();
                      ()
                    };
                  val constraint: Strengthener.this.SizeConstraint = x1._1;
                  <synthetic> val p2: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr]) = x1._2;
                  if (p2.ne(null).unary_!)
                    {
                      case6();
                      ()
                    };
                  val key: (stainless.Identifier, stainless.Identifier) = p2._1;
                  val path: Strengthener.this.checker.program.trees.Path = p2._2;
                  val args: Seq[Strengthener.this.checker.program.trees.Expr] = p2._3;
                  matchEnd4({
                    <stable> <accessor> lazy val strongFormula: Strengthener.this.checker.program.trees.Expr = path.implies(Strengthener.this.lessThan(args, fdArgs));
                    <stable> <accessor> lazy val weakFormula: Strengthener.this.checker.program.trees.Expr = path.implies(Strengthener.this.lessEquals(args, fdArgs));
                    {
                      case <synthetic> val x1: (Strengthener.this.SizeConstraint, Option[Strengthener.this.SizeConstraint]) = scala.Tuple2.apply[Strengthener.this.SizeConstraint, Option[Strengthener.this.SizeConstraint]](constraint, Strengthener.this.appConstraint.get(key));
                      case34(){
                        if (x1.ne(null).unary_!)
                          {
                            case35();
                            ()
                          };
                        <synthetic> val p3: Option[Strengthener.this.SizeConstraint] = x1._2;
                        if (p3.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                          {
                            case35();
                            ()
                          };
                        <synthetic> val x4: Some[Strengthener.this.SizeConstraint] = (p3.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                        <synthetic> val p5: Strengthener.this.SizeConstraint = x4.value;
                        if (Strengthener.this.NoConstraint.==(p5).unary_!)
                          {
                            case35();
                            ()
                          };
                        matchEnd33(scala.sys.`package`.error("Whaaaat!?!? This shouldn\'t happen..."))
                      };
                      case35(){
                        if (x1.ne(null).unary_!)
                          {
                            case36();
                            ()
                          };
                        <synthetic> val p7: Option[Strengthener.this.SizeConstraint] = x1._2;
                        if (scala.None.==(p7).unary_!)
                          {
                            case36();
                            ()
                          };
                        matchEnd33(Strengthener.this.NoConstraint)
                      };
                      case36(){
                        if (x1.ne(null).unary_!)
                          {
                            case37();
                            ()
                          };
                        <synthetic> val p8: Strengthener.this.SizeConstraint = x1._1;
                        if (Strengthener.this.NoConstraint.==(p8).unary_!)
                          {
                            case37();
                            ()
                          };
                        matchEnd33(Strengthener.this.NoConstraint)
                      };
                      case37(){
                        if (x1.ne(null).unary_!)
                          {
                            case38();
                            ()
                          };
                        <synthetic> val p10: Strengthener.this.SizeConstraint = x1._1;
                        <synthetic> val p11: Option[Strengthener.this.SizeConstraint] = x1._2;
                        if ({
  case40(){
    if (Strengthener.this.StrongDecreasing.==(p10).unary_!)
      {
        case41();
        ()
      };
    matchEnd39(true)
  };
  case41(){
    if (Strengthener.this.WeakDecreasing.==(p10).unary_!)
      {
        case42();
        ()
      };
    matchEnd39(true)
  };
  case42(){
    matchEnd39(false)
  };
  matchEnd39(x: Boolean){
    x
  }
}.unary_!)
                          {
                            case38();
                            ()
                          };
                        if (p11.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                          {
                            case38();
                            ()
                          };
                        <synthetic> val x12: Some[Strengthener.this.SizeConstraint] = (p11.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                        <synthetic> val p13: Strengthener.this.SizeConstraint = x12.value;
                        if (Strengthener.this.StrongDecreasing.==(p13).unary_!)
                          {
                            case38();
                            ()
                          };
                        matchEnd33(if (api.solveVALID(weakFormula).contains[Boolean](true))
                          Strengthener.this.StrongDecreasing
                        else
                          Strengthener.this.NoConstraint)
                      };
                      case38(){
                        if (x1.ne(null).unary_!)
                          {
                            case43();
                            ()
                          };
                        <synthetic> val p14: Strengthener.this.SizeConstraint = x1._1;
                        <synthetic> val p15: Option[Strengthener.this.SizeConstraint] = x1._2;
                        if (Strengthener.this.StrongDecreasing.==(p14).unary_!)
                          {
                            case43();
                            ()
                          };
                        if (p15.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                          {
                            case43();
                            ()
                          };
                        <synthetic> val x16: Some[Strengthener.this.SizeConstraint] = (p15.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                        <synthetic> val p17: Strengthener.this.SizeConstraint = x16.value;
                        if (Strengthener.this.WeakDecreasing.==(p17).unary_!)
                          {
                            case43();
                            ()
                          };
                        matchEnd33(if (api.solveVALID(strongFormula).contains[Boolean](true))
                          Strengthener.this.StrongDecreasing
                        else
                          if (api.solveVALID(weakFormula).contains[Boolean](true))
                            Strengthener.this.WeakDecreasing
                          else
                            Strengthener.this.NoConstraint)
                      };
                      case43(){
                        if (x1.ne(null).unary_!)
                          {
                            case44();
                            ()
                          };
                        <synthetic> val p18: Strengthener.this.SizeConstraint = x1._1;
                        <synthetic> val p19: Option[Strengthener.this.SizeConstraint] = x1._2;
                        if (Strengthener.this.WeakDecreasing.==(p18).unary_!)
                          {
                            case44();
                            ()
                          };
                        if (p19.isInstanceOf[Some[Strengthener.this.SizeConstraint]].unary_!)
                          {
                            case44();
                            ()
                          };
                        <synthetic> val x20: Some[Strengthener.this.SizeConstraint] = (p19.asInstanceOf[Some[Strengthener.this.SizeConstraint]]: Some[Strengthener.this.SizeConstraint]);
                        <synthetic> val p21: Strengthener.this.SizeConstraint = x20.value;
                        if (Strengthener.this.WeakDecreasing.==(p21).unary_!)
                          {
                            case44();
                            ()
                          };
                        matchEnd33(if (api.solveVALID(weakFormula).contains[Boolean](true))
                          Strengthener.this.WeakDecreasing
                        else
                          Strengthener.this.NoConstraint)
                      };
                      case44(){
                        matchEnd33(throw new MatchError(x1))
                      };
                      matchEnd33(x: Strengthener.this.SizeConstraint){
                        x
                      }
                    }
                  })
                };
                case6(){
                  matchEnd4(throw new MatchError(x1))
                };
                matchEnd4(x: Strengthener.this.SizeConstraint){
                  x
                }
              }));
          val outers: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = invocationMap.mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$16: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]) => x$16.filter(((x$17: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => x$17._1._1.!=(fd)))));
          fdHOArgs.foreach[Unit](((v: Strengthener.this.checker.program.trees.Variable) => Strengthener.this.appConstraint.update(scala.Predef.ArrowAssoc[inox.ast.Identifier](fd.id).->[inox.ast.Identifier](v.id), constraint(v, outers.getOrElse[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](v, scala.collection.Seq.empty[Nothing])))));
          val selfs: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]] = invocationMap.mapValues[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](((x$18: Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]) => x$18.filter(((x$19: ((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])) => x$19._1._1.==(fd)))));
          fdHOArgs.foreach[Unit](((v: Strengthener.this.checker.program.trees.Variable) => Strengthener.this.appConstraint.update(scala.Predef.ArrowAssoc[inox.ast.Identifier](fd.id).->[inox.ast.Identifier](v.id), constraint(v, selfs.getOrElse[Seq[((stainless.Identifier, stainless.Identifier), Strengthener.this.checker.program.trees.Path, Seq[Strengthener.this.checker.program.trees.Expr])]](v, scala.collection.Seq.empty[Nothing])))));
          Strengthener.this.strengthenedApp.+=(fd)
        }))
      };
      object refinementCache extends scala.AnyRef {
        def <init>(): Strengthener.this.refinementCache.type = {
          refinementCache.super.<init>();
          ()
        };
        private[this] val cache: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = scala.collection.mutable.Map.empty[(stainless.Identifier, stainless.Identifier), Seq[Strengthener.this.checker.program.trees.Type]];
        <stable> <accessor> private def cache: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = refinementCache.this.cache;
        def add(p: ((stainless.Identifier, stainless.Identifier), Seq[Strengthener.this.checker.program.trees.Type])): Unit = {
          val oldTypes: Seq[Strengthener.this.checker.program.trees.Type] = refinementCache.this.cache.getOrElse[Seq[Strengthener.this.checker.program.trees.Type]](p._1, scala.collection.Seq.apply[Nothing]());
          refinementCache.this.cache.update(p._1, oldTypes.++[Strengthener.this.checker.program.trees.Type, Seq[Strengthener.this.checker.program.trees.Type]](p._2)(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Type]))
        };
        def get: scala.collection.mutable.Map[(stainless.Identifier, stainless.Identifier),Seq[Strengthener.this.checker.program.trees.Type]] = refinementCache.this.cache
      };
      <stable> <accessor> val cfa: stainless.termination.CICFA{val program: stainless.termination.TerminationChecker.<refinement>.type};
      def annotateStrength(funDef: Strengthener.this.checker.program.trees.FunDef): Strengthener.this.checker.program.trees.FunDef = {
        val analysis: Strengthener.this.cfa.Analysis = Strengthener.this.cfa.analyze(funDef.id);
        object transformer extends AnyRef with stainless.transformers.TransformerWithPC with stainless.transformers.DefinitionTransformer {
          def <init>(): transformer.type = {
            transformer.super.<init>();
            ()
          };
          private[this] val s: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
          <stable> <accessor> def s: Strengthener.this.checker.program.trees.type = transformer.this.s;
          private[this] val t: Strengthener.this.checker.program.trees.type = Strengthener.this.checker.program.trees;
          <stable> <accessor> def t: Strengthener.this.checker.program.trees.type = transformer.this.t;
          private[this] val symbols: Strengthener.this.checker.program.symbols.type = Strengthener.this.checker.program.symbols;
          <stable> <accessor> def symbols: Strengthener.this.checker.program.symbols.type = transformer.this.symbols;
          type Env = Strengthener.this.checker.program.trees.Path;
          private[this] val initEnv: Strengthener.this.checker.program.trees.Path = Strengthener.this.checker.program.trees.Path.empty;
          <stable> <accessor> def initEnv: Strengthener.this.checker.program.trees.Path = transformer.this.initEnv;
          private[this] val pp: Strengthener.this.checker.program.trees.Path.type = Strengthener.this.checker.program.trees.Path;
          <stable> <accessor> def pp: Strengthener.this.checker.program.trees.Path.type = transformer.this.pp;
          private[this] var inLambda: Boolean = false;
          <accessor> def inLambda: Boolean = transformer.this.inLambda;
          <accessor> def inLambda_=(x$1: Boolean): Unit = transformer.this.inLambda = x$1;
          override def transform(e: Strengthener.this.checker.program.trees.Expr, path: Strengthener.this.checker.program.trees.Path): Strengthener.this.checker.program.trees.Expr = {
            case <synthetic> val x1: Strengthener.this.checker.program.trees.Expr = e;
            case7(){
              if (x1.isInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation].unary_!)
                {
                  case8();
                  ()
                };
              <synthetic> val x2: Strengthener.this.checker.program.trees.FunctionInvocation = (x1.asInstanceOf[Strengthener.this.checker.program.trees.FunctionInvocation]: Strengthener.this.checker.program.trees.FunctionInvocation);
              val fid: inox.ast.Identifier = x2.id;
              val args: Seq[Strengthener.this.checker.program.trees.Expr] = x2.args;
              matchEnd6({
                <artifact> val x$4: Seq[Strengthener.this.checker.program.trees.Expr] @scala.reflect.internal.annotations.uncheckedBounds = Strengthener.this.checker.program.symbols.getFunction(x2.id).params.map[inox.ast.Identifier, Seq[inox.ast.Identifier]](((x$20: Strengthener.this.checker.program.trees.ValDef) => x$20.id))(collection.this.Seq.canBuildFrom[inox.ast.Identifier]).zip[inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr, Seq[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]](args)(collection.this.Seq.canBuildFrom[(inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)]).map[Strengthener.this.checker.program.trees.Expr, Seq[Strengthener.this.checker.program.trees.Expr]](((x0$1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr)) => {
                  case <synthetic> val x1: (inox.ast.Identifier, Strengthener.this.checker.program.trees.Expr) = x0$1;
                  case6(){
                    if (x1.ne(null).unary_!)
                      {
                        case7();
                        ()
                      };
                    val id: inox.ast.Identifier = x1._1;
                    val l: Strengthener.this.checker.program.trees.Expr = x1._2;
                    if (l.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
                      {
                        case7();
                        ()
                      };
                    <synthetic> val x2: Strengthener.this.checker.program.trees.Lambda = (l.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
                    val largs: Seq[Strengthener.this.checker.program.trees.ValDef] = x2.params;
                    val body: Strengthener.this.checker.program.trees.Expr = x2.body;
                    if (analysis.isApplied(x2).unary_!)
                      {
                        case7();
                        ()
                      };
                    matchEnd5({
                      val cnstr: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, largs, args);
                      val old: Boolean = transformer.this.inLambda;
                      transformer.this.inLambda_=(true);
                      val newLArgs: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => {
                        val refineArg: Strengthener.this.checker.program.trees.ValDef = Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3);
                        val cnstr1: Strengthener.this.checker.program.trees.exprOps.Target = Strengthener.this.checker.program.trees.exprOps.replace(scala.Predef.Map.apply[Strengthener.this.checker.program.trees.exprOps.Target, Strengthener.this.checker.program.trees.Variable](scala.Predef.ArrowAssoc[Strengthener.this.checker.program.trees.Variable](arg.toVariable).->[Strengthener.this.checker.program.trees.Variable](refineArg.toVariable)), cnstr);
                        val tpe1: Strengthener.this.checker.program.trees.RefinementType = Strengthener.this.checker.program.trees.RefinementType.apply(refineArg, cnstr1);
                        {
                          <artifact> val x$1: Strengthener.this.checker.program.trees.RefinementType = tpe1;
                          <artifact> val x$2: inox.ast.Identifier = arg.copy$default$1;
                          <artifact> val x$3: Seq[Strengthener.this.checker.program.trees.Flag] @scala.reflect.internal.annotations.uncheckedBounds = arg.copy$default$3;
                          arg.copy(x$2, x$1, x$3)
                        }
                      }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                      val recBody: Strengthener.this.checker.program.trees.Expr = transformer.this.transform(body, path.withBounds(largs));
                      val largsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = largs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$21: Strengthener.this.checker.program.trees.ValDef) => x$21.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                      val newLArgsDefs: Seq[Strengthener.this.checker.program.trees.Variable] = newLArgs.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Variable]](((x$22: Strengthener.this.checker.program.trees.ValDef) => x$22.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]);
                      val subst: scala.collection.immutable.Map[Strengthener.this.checker.program.trees.Variable,Strengthener.this.checker.program.trees.Variable] = largsDefs.zip[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable, Seq[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]](newLArgsDefs)(collection.this.Seq.canBuildFrom[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]).toMap[Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable](scala.Predef.$conforms[(Strengthener.this.checker.program.trees.Variable, Strengthener.this.checker.program.trees.Variable)]);
                      val newBody: Strengthener.this.checker.program.trees.exprOps.trees.Expr = Strengthener.this.checker.program.trees.exprOps.replaceFromSymbols[Strengthener.this.checker.program.trees.Variable](subst, recBody)(Strengthener.this.checker.program.trees.convertToVariable);
                      val freshTuple: Seq[Strengthener.this.checker.program.trees.ValDef] = largs.map[Strengthener.this.checker.program.trees.ValDef, Seq[Strengthener.this.checker.program.trees.ValDef]](((arg: Strengthener.this.checker.program.trees.ValDef) => Strengthener.this.checker.program.trees.ValDef.fresh("z", arg.tpe, Strengthener.this.checker.program.trees.ValDef.fresh$default$3)))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.ValDef]);
                      val cnstr1: Strengthener.this.checker.program.trees.Expr = Strengthener.this.applicationConstraint(x2.id, id, freshTuple, x2.tfd(Strengthener.this.checker.program.symbols.implicitSymbols).params.map[Strengthener.this.checker.program.trees.Variable, Seq[Strengthener.this.checker.program.trees.Expr]](((x$23: Strengthener.this.checker.program.trees.ValDef) => x$23.toVariable))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Variable]));
                      val <tpe: error>: <error> = Strengthener.this.checker.program.trees.RefinementType.apply(freshTuple, <constr1: error>);
                      Strengthener.this.refinementCache.add(scala.Tuple2.apply[T1, T2](scala.Tuple2(fid, id), Seq(<tpe: error>)));
                      transformer.this.inLambda_=(old);
                      Strengthener.this.checker.program.trees.Lambda.apply(newLArgs, newBody)
                    })
                  };
                  case7(){
                    if (x1.ne(null).unary_!)
                      {
                        case8();
                        ()
                      };
                    val arg: Strengthener.this.checker.program.trees.Expr = x1._2;
                    matchEnd5(transformer.this.transform(arg, path))
                  };
                  case8(){
                    matchEnd5(throw new MatchError(x1))
                  };
                  matchEnd5(x: Strengthener.this.checker.program.trees.Expr){
                    x
                  }
                }))(collection.this.Seq.canBuildFrom[Strengthener.this.checker.program.trees.Expr]);
                <artifact> val x$5: inox.ast.Identifier = x2.copy$default$1;
                <artifact> val x$6: Seq[Strengthener.this.checker.program.trees.Type] @scala.reflect.internal.annotations.uncheckedBounds = x2.copy$default$2;
                x2.copy(x$5, x$6, x$4)
              })
            };
            case8(){
              if (x1.isInstanceOf[Strengthener.this.checker.program.trees.Lambda].unary_!)
                {
                  case9();
                  ()
                };
              <synthetic> val x4: Strengthener.this.checker.program.trees.Lambda = (x1.asInstanceOf[Strengthener.this.checker.program.trees.Lambda]: Strengthener.this.checker.program.trees.Lambda);
              matchEnd6(if (analysis.isApplied(x4))
                {
                  val old: Boolean = transformer.this.inLambda;
                  transformer.this.inLambda_=(true);
                  val res: stainless.termination.Strengthener.transformer.t.Expr = transformer.super.transform(e, path);
                  transformer.this.inLambda_=(old);
                  res
                }
              else
                x4)
            };
            case9(){
              matchEnd6(transformer.super.transform(e, path))
            };
            matchEnd6(x: Strengthener.this.checker.program.trees.Expr){
              x
            }
          }
        };
        transformer.transform(funDef)
      }
    }
  }
}
[error] ## Exception when compiling 210 sources to /localhome/raya/Desktop/lara/stainless/core/target/scala-2.12/classes
[error] java.lang.AssertionError: assertion failed: 
[error]   Seq(<tpe: error>)
[error]      while compiling: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
[error]         during phase: superaccessors
[error]      library version: version 2.12.9
[error]     compiler version: version 2.12.9
[error]   reconstructed args: -deprecation -feature -bootclasspath /usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.12.9/scala-library-2.12.9.jar -classpath /localhome/raya/Desktop/lara/stainless/core/target/scala-2.12/classes:/localhome/raya/Desktop/lara/inox/target/scala-2.12/classes:/localhome/raya/Desktop/lara/inox/unmanaged/scalaz3-unix-64-2.12.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/ch/epfl/lara/cafebabe_2.12/1.2/cafebabe_2.12-1.2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/macro-compat_2.12/1.1.1/macro-compat_2.12-1.1.1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/2.12.9/scala-reflect-2.12.9.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/spire-math/jawn-parser_2.12/0.13.0/jawn-parser_2.12-0.13.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-jawn_2.12/0.10.0-M2/circe-jawn_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier_2.12/2.0.0-RC4-1/coursier_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-core_2.12/1.2.0/cats-core_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-kernel_2.12/1.2.0/cats-kernel_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier-core_2.12/2.0.0-RC4-1/coursier-core_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-generic_2.12/0.10.0-M2/circe-generic_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/net/sf/squirrel-sql/thirdparty-non-maven/java-cup/0.11a/java-cup-0.11a.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier-cache_2.12/2.0.0-RC4-1/coursier-cache_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/regblanc/scala-smtlib_2.12/0.2.2-7-g00a9686/scala-smtlib_2.12-0.2.2-7-g00a9686.jar:/localhome/raya/.cache/coursier/v1/http/logicrunch.research.it.uu.se/maven/uuverifiers/princess-parser_2.12/2018-02-26/princess-parser_2.12-2018-02-26.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-core_2.12/0.10.0-M2/circe-core_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/chuusai/shapeless_2.12/2.3.3/shapeless_2.12-2.3.3.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-macros_2.12/1.2.0/cats-macros_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.2.0/scala-xml_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-parser_2.12/0.10.0-M2/circe-parser_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/http/logicrunch.research.it.uu.se/maven/uuverifiers/princess_2.12/2018-02-26/princess_2.12-2018-02-26.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.12/1.0.4/scala-parser-combinators_2.12-1.0.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier-util_2.12/2.0.0-RC4-1/coursier-util_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/typesafe/config/1.3.4/config-1.3.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/machinist_2.12/0.6.4/machinist_2.12-0.6.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/argonaut/argonaut_2.12/6.2.3/argonaut_2.12-6.2.3.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-numbers_2.12/0.10.0-M2/circe-numbers_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/alexarchambault/argonaut-shapeless_6.2_2.12/1.2.0-M11/argonaut-shapeless_6.2_2.12-1.2.0-M11.jar:/localhome/raya/.cache/coursier/v1/http/logicrunch.research.it.uu.se/maven/uuverifiers/princess-smt-parser_2.12/2018-02-26/princess-smt-parser_2.12-2018-02-26.jar -unchecked
[error] 
[error]   last tree to typer: EmptyTree
[error]        tree position: <unknown>
[error]             tree tpe: <notype>
[error]               symbol: null
[error]            call site: method transform in object transformer in package termination
[error] 
[error] == Source file context for tree position ==
[error] 
[error] 
[error] scala.reflect.internal.SymbolTable.throwAssertionError(SymbolTable.scala:184)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:401)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transformArgs$1(SuperAccessors.scala:123)
[error] scala.reflect.internal.TreeInfo.$anonfun$mapMethodParamsAndArgs$1$adapted(TreeInfo.scala:239)
[error] scala.reflect.internal.TreeInfo.foreachMethodParamAndArg(TreeInfo.scala:253)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformArgs(SuperAccessors.scala:120)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transformArgs$1(SuperAccessors.scala:123)
[error] scala.reflect.internal.TreeInfo.$anonfun$mapMethodParamsAndArgs$1$adapted(TreeInfo.scala:239)
[error] scala.reflect.internal.TreeInfo.foreachMethodParamAndArg(TreeInfo.scala:253)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformArgs(SuperAccessors.scala:120)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transformArgs$1(SuperAccessors.scala:123)
[error] scala.reflect.internal.TreeInfo.$anonfun$mapMethodParamsAndArgs$1$adapted(TreeInfo.scala:239)
[error] scala.reflect.internal.TreeInfo.foreachMethodParamAndArg(TreeInfo.scala:253)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformArgs(SuperAccessors.scala:120)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1459)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transform$17(SuperAccessors.scala:406)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:445)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transformArgs$1(SuperAccessors.scala:123)
[error] scala.reflect.internal.TreeInfo.$anonfun$mapMethodParamsAndArgs$1$adapted(TreeInfo.scala:239)
[error] scala.reflect.internal.TreeInfo.foreachMethodParamAndArg(TreeInfo.scala:253)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformArgs(SuperAccessors.scala:120)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.internal.Trees.$anonfun$itransform$1(Trees.scala:1395)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1394)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transformArgs$1(SuperAccessors.scala:123)
[error] scala.reflect.internal.TreeInfo.$anonfun$mapMethodParamsAndArgs$1$adapted(TreeInfo.scala:239)
[error] scala.reflect.internal.TreeInfo.foreachMethodParamAndArg(TreeInfo.scala:253)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformArgs(SuperAccessors.scala:120)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1459)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.internal.Trees.$anonfun$itransform$2(Trees.scala:1401)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1399)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.$anonfun$transformTrees$1(Trees.scala:2567)
[error] scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:2567)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transform$4(SuperAccessors.scala:268)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformTemplate$1(SuperAccessors.scala:268)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:273)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.transformTemplate(Trees.scala:2571)
[error] scala.reflect.internal.Trees.$anonfun$itransform$5(Trees.scala:1451)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1450)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:256)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.internal.Trees.$anonfun$itransform$2(Trees.scala:1401)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1399)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.$anonfun$transformTrees$1(Trees.scala:2567)
[error] scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:2567)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transform$4(SuperAccessors.scala:268)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformTemplate$1(SuperAccessors.scala:268)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:273)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.transformTemplate(Trees.scala:2571)
[error] scala.reflect.internal.Trees.$anonfun$itransform$4(Trees.scala:1446)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1445)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformClassDef$1(SuperAccessors.scala:250)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:252)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] scala.reflect.internal.Trees.$anonfun$itransform$7(Trees.scala:1464)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1464)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.super$transform(TypingTransformers.scala:47)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.$anonfun$transform$2(TypingTransformers.scala:49)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:32)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] scala.reflect.internal.Trees.$anonfun$itransform$7(Trees.scala:1464)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] scala.reflect.internal.Trees.itransform(Trees.scala:1464)
[error] scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.super$transform(TypingTransformers.scala:47)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.$anonfun$transform$2(TypingTransformers.scala:49)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:32)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] scala.tools.nsc.ast.Trees$Transformer.transformUnit(Trees.scala:147)
[error] scala.tools.nsc.transform.Transform$Phase.apply(Transform.scala:37)
[error] scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:453)
[error] scala.tools.nsc.Global$GlobalPhase.run(Global.scala:399)
[error] scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1503)
[error] scala.tools.nsc.Global$Run.compileUnits(Global.scala:1487)
[error] scala.tools.nsc.Global$Run.compileSources(Global.scala:1480)
[error] scala.tools.nsc.Global$Run.compile(Global.scala:1606)
[error] xsbt.CachedCompiler0.run(CompilerInterface.scala:153)
[error] xsbt.CachedCompiler0.run(CompilerInterface.scala:125)
[error] xsbt.CompilerInterface.run(CompilerInterface.scala:39)
[error] sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[error] sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[error] java.lang.reflect.Method.invoke(Method.java:498)
[error] sbt.internal.inc.AnalyzingCompiler.call(AnalyzingCompiler.scala:248)
[error] sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:122)
[error] sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:95)
[error] sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4(MixedAnalyzingCompiler.scala:91)
[error] scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
[error] sbt.internal.inc.MixedAnalyzingCompiler.timed(MixedAnalyzingCompiler.scala:186)
[error] sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$3(MixedAnalyzingCompiler.scala:82)
[error] sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$3$adapted(MixedAnalyzingCompiler.scala:77)
[error] sbt.internal.inc.JarUtils$.withPreviousJar(JarUtils.scala:215)
[error] sbt.internal.inc.MixedAnalyzingCompiler.compileScala$1(MixedAnalyzingCompiler.scala:77)
[error] sbt.internal.inc.MixedAnalyzingCompiler.compile(MixedAnalyzingCompiler.scala:146)
[error] sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1(IncrementalCompilerImpl.scala:343)
[error] sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1$adapted(IncrementalCompilerImpl.scala:343)
[error] sbt.internal.inc.Incremental$.doCompile(Incremental.scala:120)
[error] sbt.internal.inc.Incremental$.$anonfun$compile$4(Incremental.scala:100)
[error] sbt.internal.inc.IncrementalCommon.recompileClasses(IncrementalCommon.scala:180)
[error] sbt.internal.inc.IncrementalCommon.cycle(IncrementalCommon.scala:98)
[error] sbt.internal.inc.Incremental$.$anonfun$compile$3(Incremental.scala:102)
[error] sbt.internal.inc.Incremental$.manageClassfiles(Incremental.scala:155)
[error] sbt.internal.inc.Incremental$.compile(Incremental.scala:92)
[error] sbt.internal.inc.IncrementalCompile$.apply(Compile.scala:75)
[error] sbt.internal.inc.IncrementalCompilerImpl.compileInternal(IncrementalCompilerImpl.scala:348)
[error] sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileIncrementally$1(IncrementalCompilerImpl.scala:301)
[error] sbt.internal.inc.IncrementalCompilerImpl.handleCompilationError(IncrementalCompilerImpl.scala:168)
[error] sbt.internal.inc.IncrementalCompilerImpl.compileIncrementally(IncrementalCompilerImpl.scala:248)
[error] sbt.internal.inc.IncrementalCompilerImpl.compile(IncrementalCompilerImpl.scala:74)
[error] sbt.Defaults$.compileIncrementalTaskImpl(Defaults.scala:1736)
[error] sbt.Defaults$.$anonfun$compileIncrementalTask$1(Defaults.scala:1709)
[error] scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)
[error] sbt.std.Transform$$anon$4.work(Transform.scala:67)
[error] sbt.Execute.$anonfun$submit$2(Execute.scala:280)
[error] sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:19)
[error] sbt.Execute.work(Execute.scala:289)
[error] sbt.Execute.$anonfun$submit$1(Execute.scala:280)
[error] sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178)
[error] sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
[error] java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error] java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error] java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error] java.lang.Thread.run(Thread.java:748)
[error]            
[error] java.lang.AssertionError: assertion failed: 
[error]   Seq(<tpe: error>)
[error]      while compiling: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
[error]         during phase: superaccessors
[error]      library version: version 2.12.9
[error]     compiler version: version 2.12.9
[error]   reconstructed args: -deprecation -feature -bootclasspath /usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.12.9/scala-library-2.12.9.jar -classpath /localhome/raya/Desktop/lara/stainless/core/target/scala-2.12/classes:/localhome/raya/Desktop/lara/inox/target/scala-2.12/classes:/localhome/raya/Desktop/lara/inox/unmanaged/scalaz3-unix-64-2.12.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/ch/epfl/lara/cafebabe_2.12/1.2/cafebabe_2.12-1.2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/macro-compat_2.12/1.1.1/macro-compat_2.12-1.1.1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/2.12.9/scala-reflect-2.12.9.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/spire-math/jawn-parser_2.12/0.13.0/jawn-parser_2.12-0.13.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-jawn_2.12/0.10.0-M2/circe-jawn_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier_2.12/2.0.0-RC4-1/coursier_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-core_2.12/1.2.0/cats-core_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-kernel_2.12/1.2.0/cats-kernel_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier-core_2.12/2.0.0-RC4-1/coursier-core_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-generic_2.12/0.10.0-M2/circe-generic_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/net/sf/squirrel-sql/thirdparty-non-maven/java-cup/0.11a/java-cup-0.11a.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier-cache_2.12/2.0.0-RC4-1/coursier-cache_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/regblanc/scala-smtlib_2.12/0.2.2-7-g00a9686/scala-smtlib_2.12-0.2.2-7-g00a9686.jar:/localhome/raya/.cache/coursier/v1/http/logicrunch.research.it.uu.se/maven/uuverifiers/princess-parser_2.12/2018-02-26/princess-parser_2.12-2018-02-26.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-core_2.12/0.10.0-M2/circe-core_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/chuusai/shapeless_2.12/2.3.3/shapeless_2.12-2.3.3.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-macros_2.12/1.2.0/cats-macros_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.2.0/scala-xml_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-parser_2.12/0.10.0-M2/circe-parser_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/http/logicrunch.research.it.uu.se/maven/uuverifiers/princess_2.12/2018-02-26/princess_2.12-2018-02-26.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.12/1.0.4/scala-parser-combinators_2.12-1.0.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier-util_2.12/2.0.0-RC4-1/coursier-util_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/typesafe/config/1.3.4/config-1.3.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/machinist_2.12/0.6.4/machinist_2.12-0.6.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/argonaut/argonaut_2.12/6.2.3/argonaut_2.12-6.2.3.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-numbers_2.12/0.10.0-M2/circe-numbers_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/alexarchambault/argonaut-shapeless_6.2_2.12/1.2.0-M11/argonaut-shapeless_6.2_2.12-1.2.0-M11.jar:/localhome/raya/.cache/coursier/v1/http/logicrunch.research.it.uu.se/maven/uuverifiers/princess-smt-parser_2.12/2018-02-26/princess-smt-parser_2.12-2018-02-26.jar -unchecked
[error] 
[error]   last tree to typer: EmptyTree
[error]        tree position: <unknown>
[error]             tree tpe: <notype>
[error]               symbol: null
[error]            call site: method transform in object transformer in package termination
[error] 
[error] == Source file context for tree position ==
[error] 
[error] 
[error] 	at scala.reflect.internal.SymbolTable.throwAssertionError(SymbolTable.scala:184)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:401)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transformArgs$1(SuperAccessors.scala:123)
[error] 	at scala.reflect.internal.TreeInfo.$anonfun$mapMethodParamsAndArgs$1$adapted(TreeInfo.scala:239)
[error] 	at scala.reflect.internal.TreeInfo.foreachMethodParamAndArg(TreeInfo.scala:253)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformArgs(SuperAccessors.scala:120)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transformArgs$1(SuperAccessors.scala:123)
[error] 	at scala.reflect.internal.TreeInfo.$anonfun$mapMethodParamsAndArgs$1$adapted(TreeInfo.scala:239)
[error] 	at scala.reflect.internal.TreeInfo.foreachMethodParamAndArg(TreeInfo.scala:253)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformArgs(SuperAccessors.scala:120)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] 	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transformArgs$1(SuperAccessors.scala:123)
[error] 	at scala.reflect.internal.TreeInfo.$anonfun$mapMethodParamsAndArgs$1$adapted(TreeInfo.scala:239)
[error] 	at scala.reflect.internal.TreeInfo.foreachMethodParamAndArg(TreeInfo.scala:253)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformArgs(SuperAccessors.scala:120)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1459)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] 	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transform$17(SuperAccessors.scala:406)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:445)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transformArgs$1(SuperAccessors.scala:123)
[error] 	at scala.reflect.internal.TreeInfo.$anonfun$mapMethodParamsAndArgs$1$adapted(TreeInfo.scala:239)
[error] 	at scala.reflect.internal.TreeInfo.foreachMethodParamAndArg(TreeInfo.scala:253)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformArgs(SuperAccessors.scala:120)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.internal.Trees.$anonfun$itransform$1(Trees.scala:1395)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1394)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] 	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transformArgs$1(SuperAccessors.scala:123)
[error] 	at scala.reflect.internal.TreeInfo.$anonfun$mapMethodParamsAndArgs$1$adapted(TreeInfo.scala:239)
[error] 	at scala.reflect.internal.TreeInfo.foreachMethodParamAndArg(TreeInfo.scala:253)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformArgs(SuperAccessors.scala:120)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:402)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1459)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] 	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.internal.Trees.$anonfun$itransform$2(Trees.scala:1401)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1399)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.$anonfun$transformTrees$1(Trees.scala:2567)
[error] 	at scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:2567)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transform$4(SuperAccessors.scala:268)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformTemplate$1(SuperAccessors.scala:268)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:273)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.transformTemplate(Trees.scala:2571)
[error] 	at scala.reflect.internal.Trees.$anonfun$itransform$5(Trees.scala:1451)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1450)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:256)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] 	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1404)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.internal.Trees.$anonfun$itransform$2(Trees.scala:1401)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1399)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.$anonfun$transformTrees$1(Trees.scala:2567)
[error] 	at scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:2567)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.$anonfun$transform$4(SuperAccessors.scala:268)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformTemplate$1(SuperAccessors.scala:268)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:273)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.transformTemplate(Trees.scala:2571)
[error] 	at scala.reflect.internal.Trees.$anonfun$itransform$4(Trees.scala:1446)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1445)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:51)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transformClassDef$1(SuperAccessors.scala:250)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:252)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] 	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] 	at scala.reflect.internal.Trees.$anonfun$itransform$7(Trees.scala:1464)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1464)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.super$transform(TypingTransformers.scala:47)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.$anonfun$transform$2(TypingTransformers.scala:49)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:32)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.reflect.api.Trees$Transformer.$anonfun$transformStats$1(Trees.scala:2597)
[error] 	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:2595)
[error] 	at scala.reflect.internal.Trees.$anonfun$itransform$7(Trees.scala:1464)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:32)
[error] 	at scala.reflect.internal.Trees.itransform(Trees.scala:1464)
[error] 	at scala.reflect.internal.Trees.itransform$(Trees.scala:1374)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:28)
[error] 	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:2563)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.super$transform(TypingTransformers.scala:47)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.$anonfun$transform$2(TypingTransformers.scala:49)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.atOwner(SuperAccessors.scala:435)
[error] 	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:32)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:410)
[error] 	at scala.tools.nsc.typechecker.SuperAccessors$SuperAccTransformer.transform(SuperAccessors.scala:82)
[error] 	at scala.tools.nsc.ast.Trees$Transformer.transformUnit(Trees.scala:147)
[error] 	at scala.tools.nsc.transform.Transform$Phase.apply(Transform.scala:37)
[error] 	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:453)
[error] 	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:399)
[error] 	at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1503)
[error] 	at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1487)
[error] 	at scala.tools.nsc.Global$Run.compileSources(Global.scala:1480)
[error] 	at scala.tools.nsc.Global$Run.compile(Global.scala:1606)
[error] 	at xsbt.CachedCompiler0.run(CompilerInterface.scala:153)
[error] 	at xsbt.CachedCompiler0.run(CompilerInterface.scala:125)
[error] 	at xsbt.CompilerInterface.run(CompilerInterface.scala:39)
[error] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[error] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[error] 	at java.lang.reflect.Method.invoke(Method.java:498)
[error] 	at sbt.internal.inc.AnalyzingCompiler.call(AnalyzingCompiler.scala:248)
[error] 	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:122)
[error] 	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:95)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4(MixedAnalyzingCompiler.scala:91)
[error] 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.timed(MixedAnalyzingCompiler.scala:186)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$3(MixedAnalyzingCompiler.scala:82)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$3$adapted(MixedAnalyzingCompiler.scala:77)
[error] 	at sbt.internal.inc.JarUtils$.withPreviousJar(JarUtils.scala:215)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.compileScala$1(MixedAnalyzingCompiler.scala:77)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.compile(MixedAnalyzingCompiler.scala:146)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1(IncrementalCompilerImpl.scala:343)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1$adapted(IncrementalCompilerImpl.scala:343)
[error] 	at sbt.internal.inc.Incremental$.doCompile(Incremental.scala:120)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$compile$4(Incremental.scala:100)
[error] 	at sbt.internal.inc.IncrementalCommon.recompileClasses(IncrementalCommon.scala:180)
[error] 	at sbt.internal.inc.IncrementalCommon.cycle(IncrementalCommon.scala:98)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$compile$3(Incremental.scala:102)
[error] 	at sbt.internal.inc.Incremental$.manageClassfiles(Incremental.scala:155)
[error] 	at sbt.internal.inc.Incremental$.compile(Incremental.scala:92)
[error] 	at sbt.internal.inc.IncrementalCompile$.apply(Compile.scala:75)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compileInternal(IncrementalCompilerImpl.scala:348)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileIncrementally$1(IncrementalCompilerImpl.scala:301)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.handleCompilationError(IncrementalCompilerImpl.scala:168)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compileIncrementally(IncrementalCompilerImpl.scala:248)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compile(IncrementalCompilerImpl.scala:74)
[error] 	at sbt.Defaults$.compileIncrementalTaskImpl(Defaults.scala:1736)
[error] 	at sbt.Defaults$.$anonfun$compileIncrementalTask$1(Defaults.scala:1709)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:67)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:280)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:19)
[error] 	at sbt.Execute.work(Execute.scala:289)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:280)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error] 	at java.lang.Thread.run(Thread.java:748)
[error] (stainless-core / Compile / compileIncremental) java.lang.AssertionError: assertion failed: 
[error]   Seq(<tpe: error>)
[error]      while compiling: /localhome/raya/Desktop/lara/stainless/core/src/main/scala/stainless/termination/Strenghtener.scala
[error]         during phase: superaccessors
[error]      library version: version 2.12.9
[error]     compiler version: version 2.12.9
[error]   reconstructed args: -deprecation -feature -bootclasspath /usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.12.9/scala-library-2.12.9.jar -classpath /localhome/raya/Desktop/lara/stainless/core/target/scala-2.12/classes:/localhome/raya/Desktop/lara/inox/target/scala-2.12/classes:/localhome/raya/Desktop/lara/inox/unmanaged/scalaz3-unix-64-2.12.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/ch/epfl/lara/cafebabe_2.12/1.2/cafebabe_2.12-1.2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/macro-compat_2.12/1.1.1/macro-compat_2.12-1.1.1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/2.12.9/scala-reflect-2.12.9.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/spire-math/jawn-parser_2.12/0.13.0/jawn-parser_2.12-0.13.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-jawn_2.12/0.10.0-M2/circe-jawn_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier_2.12/2.0.0-RC4-1/coursier_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-core_2.12/1.2.0/cats-core_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-kernel_2.12/1.2.0/cats-kernel_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier-core_2.12/2.0.0-RC4-1/coursier-core_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-generic_2.12/0.10.0-M2/circe-generic_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/net/sf/squirrel-sql/thirdparty-non-maven/java-cup/0.11a/java-cup-0.11a.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier-cache_2.12/2.0.0-RC4-1/coursier-cache_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/regblanc/scala-smtlib_2.12/0.2.2-7-g00a9686/scala-smtlib_2.12-0.2.2-7-g00a9686.jar:/localhome/raya/.cache/coursier/v1/http/logicrunch.research.it.uu.se/maven/uuverifiers/princess-parser_2.12/2018-02-26/princess-parser_2.12-2018-02-26.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-core_2.12/0.10.0-M2/circe-core_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/chuusai/shapeless_2.12/2.3.3/shapeless_2.12-2.3.3.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-macros_2.12/1.2.0/cats-macros_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.2.0/scala-xml_2.12-1.2.0.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-parser_2.12/0.10.0-M2/circe-parser_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/http/logicrunch.research.it.uu.se/maven/uuverifiers/princess_2.12/2018-02-26/princess_2.12-2018-02-26.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.12/1.0.4/scala-parser-combinators_2.12-1.0.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/coursier-util_2.12/2.0.0-RC4-1/coursier-util_2.12-2.0.0-RC4-1.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/typesafe/config/1.3.4/config-1.3.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/machinist_2.12/0.6.4/machinist_2.12-0.6.4.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/argonaut/argonaut_2.12/6.2.3/argonaut_2.12-6.2.3.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/io/circe/circe-numbers_2.12/0.10.0-M2/circe-numbers_2.12-0.10.0-M2.jar:/localhome/raya/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/alexarchambault/argonaut-shapeless_6.2_2.12/1.2.0-M11/argonaut-shapeless_6.2_2.12-1.2.0-M11.jar:/localhome/raya/.cache/coursier/v1/http/logicrunch.research.it.uu.se/maven/uuverifiers/princess-smt-parser_2.12/2018-02-26/princess-smt-parser_2.12-2018-02-26.jar -unchecked
[error] 
[error]   last tree to typer: EmptyTree
[error]        tree position: <unknown>
[error]             tree tpe: <notype>
[error]               symbol: null
[error]            call site: method transform in object transformer in package termination
[error] 
[error] == Source file context for tree position ==
[error] 
[error] Total time: 16 s, completed Dec 3, 2020 3:36:59 PM
